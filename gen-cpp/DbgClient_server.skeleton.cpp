// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DbgClient.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class DbgClientHandler : virtual public DbgClientIf {
 public:
  DbgClientHandler() {
    // Your initialization goes here
  }

  void start_event() {
    // Your implementation goes here
    printf("start_event\n");
  }

  void pause_event(const int32_t address) {
    // Your implementation goes here
    printf("pause_event\n");
  }

  void break_event(const int32_t address) {
    // Your implementation goes here
    printf("break_event\n");
  }

  void step_event(const int32_t address) {
    // Your implementation goes here
    printf("step_event\n");
  }

  void stop_event() {
    // Your implementation goes here
    printf("stop_event\n");
  }

  void update_map(const int32_t prev, const int32_t curr, const bool visited) {
    // Your implementation goes here
    printf("update_map\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<DbgClientHandler> handler(new DbgClientHandler());
  ::std::shared_ptr<TProcessor> processor(new DbgClientProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

