// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DbgServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class DbgServerHandler : virtual public DbgServerIf {
 public:
  DbgServerHandler() {
    // Your initialization goes here
  }

  int32_t get_gp_reg(const GpRegsEnum::type index) {
    // Your implementation goes here
    printf("get_gp_reg\n");
  }

  void get_gp_regs(GpRegisters& _return) {
    // Your implementation goes here
    printf("get_gp_regs\n");
  }

  void set_gp_reg(const GpRegister& reg) {
    // Your implementation goes here
    printf("set_gp_reg\n");
  }

  int16_t get_vdp_reg(const VdpRegsEnum::type index) {
    // Your implementation goes here
    printf("get_vdp_reg\n");
  }

  void get_vdp_regs(VdpRegisters& _return) {
    // Your implementation goes here
    printf("get_vdp_regs\n");
  }

  void set_vdp_reg(const VdpRegister& reg) {
    // Your implementation goes here
    printf("set_vdp_reg\n");
  }

  void get_dma_info(DmaInfo& _return) {
    // Your implementation goes here
    printf("get_dma_info\n");
  }

  void read_memory(std::string& _return, const int32_t address, const int32_t size) {
    // Your implementation goes here
    printf("read_memory\n");
  }

  void write_memory(const int32_t address, const std::string& data) {
    // Your implementation goes here
    printf("write_memory\n");
  }

  void get_breakpoints(std::vector<DbgBreakpoint> & _return) {
    // Your implementation goes here
    printf("get_breakpoints\n");
  }

  void add_breakpoint(const DbgBreakpoint& bpt) {
    // Your implementation goes here
    printf("add_breakpoint\n");
  }

  void toggle_breakpoint(const DbgBreakpoint& bpt) {
    // Your implementation goes here
    printf("toggle_breakpoint\n");
  }

  void update_breakpoint(const DbgBreakpoint& bpt) {
    // Your implementation goes here
    printf("update_breakpoint\n");
  }

  void del_breakpoint(const DbgBreakpoint& bpt) {
    // Your implementation goes here
    printf("del_breakpoint\n");
  }

  void clear_breakpoints() {
    // Your implementation goes here
    printf("clear_breakpoints\n");
  }

  void pause() {
    // Your implementation goes here
    printf("pause\n");
  }

  void resume() {
    // Your implementation goes here
    printf("resume\n");
  }

  void start_emulation() {
    // Your implementation goes here
    printf("start_emulation\n");
  }

  void exit_emulation() {
    // Your implementation goes here
    printf("exit_emulation\n");
  }

  void step_into() {
    // Your implementation goes here
    printf("step_into\n");
  }

  void step_over() {
    // Your implementation goes here
    printf("step_over\n");
  }

  void get_callstack(std::vector<int32_t> & _return) {
    // Your implementation goes here
    printf("get_callstack\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<DbgServerHandler> handler(new DbgServerHandler());
  ::std::shared_ptr<TProcessor> processor(new DbgServerProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

