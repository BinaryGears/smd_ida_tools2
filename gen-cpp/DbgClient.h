/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DbgClient_H
#define DbgClient_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "debug_proto_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DbgClientIf {
 public:
  virtual ~DbgClientIf() {}
  virtual void start_event() = 0;
  virtual void pause_event(const int32_t address) = 0;
  virtual void break_event(const int32_t address) = 0;
  virtual void step_event(const int32_t address) = 0;
  virtual void stop_event() = 0;
  virtual void update_map(const int32_t prev, const int32_t curr, const bool visited) = 0;
};

class DbgClientIfFactory {
 public:
  typedef DbgClientIf Handler;

  virtual ~DbgClientIfFactory() {}

  virtual DbgClientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DbgClientIf* /* handler */) = 0;
};

class DbgClientIfSingletonFactory : virtual public DbgClientIfFactory {
 public:
  DbgClientIfSingletonFactory(const ::std::shared_ptr<DbgClientIf>& iface) : iface_(iface) {}
  virtual ~DbgClientIfSingletonFactory() {}

  virtual DbgClientIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DbgClientIf* /* handler */) {}

 protected:
  ::std::shared_ptr<DbgClientIf> iface_;
};

class DbgClientNull : virtual public DbgClientIf {
 public:
  virtual ~DbgClientNull() {}
  void start_event() {
    return;
  }
  void pause_event(const int32_t /* address */) {
    return;
  }
  void break_event(const int32_t /* address */) {
    return;
  }
  void step_event(const int32_t /* address */) {
    return;
  }
  void stop_event() {
    return;
  }
  void update_map(const int32_t /* prev */, const int32_t /* curr */, const bool /* visited */) {
    return;
  }
};


class DbgClient_start_event_args {
 public:

  DbgClient_start_event_args(const DbgClient_start_event_args&);
  DbgClient_start_event_args& operator=(const DbgClient_start_event_args&);
  DbgClient_start_event_args() {
  }

  virtual ~DbgClient_start_event_args() noexcept;

  bool operator == (const DbgClient_start_event_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgClient_start_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgClient_start_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_start_event_pargs {
 public:


  virtual ~DbgClient_start_event_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgClient_pause_event_args__isset {
  _DbgClient_pause_event_args__isset() : address(false) {}
  bool address :1;
} _DbgClient_pause_event_args__isset;

class DbgClient_pause_event_args {
 public:

  DbgClient_pause_event_args(const DbgClient_pause_event_args&);
  DbgClient_pause_event_args& operator=(const DbgClient_pause_event_args&);
  DbgClient_pause_event_args() : address(0) {
  }

  virtual ~DbgClient_pause_event_args() noexcept;
  int32_t address;

  _DbgClient_pause_event_args__isset __isset;

  void __set_address(const int32_t val);

  bool operator == (const DbgClient_pause_event_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const DbgClient_pause_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgClient_pause_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_pause_event_pargs {
 public:


  virtual ~DbgClient_pause_event_pargs() noexcept;
  const int32_t* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgClient_break_event_args__isset {
  _DbgClient_break_event_args__isset() : address(false) {}
  bool address :1;
} _DbgClient_break_event_args__isset;

class DbgClient_break_event_args {
 public:

  DbgClient_break_event_args(const DbgClient_break_event_args&);
  DbgClient_break_event_args& operator=(const DbgClient_break_event_args&);
  DbgClient_break_event_args() : address(0) {
  }

  virtual ~DbgClient_break_event_args() noexcept;
  int32_t address;

  _DbgClient_break_event_args__isset __isset;

  void __set_address(const int32_t val);

  bool operator == (const DbgClient_break_event_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const DbgClient_break_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgClient_break_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_break_event_pargs {
 public:


  virtual ~DbgClient_break_event_pargs() noexcept;
  const int32_t* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgClient_step_event_args__isset {
  _DbgClient_step_event_args__isset() : address(false) {}
  bool address :1;
} _DbgClient_step_event_args__isset;

class DbgClient_step_event_args {
 public:

  DbgClient_step_event_args(const DbgClient_step_event_args&);
  DbgClient_step_event_args& operator=(const DbgClient_step_event_args&);
  DbgClient_step_event_args() : address(0) {
  }

  virtual ~DbgClient_step_event_args() noexcept;
  int32_t address;

  _DbgClient_step_event_args__isset __isset;

  void __set_address(const int32_t val);

  bool operator == (const DbgClient_step_event_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const DbgClient_step_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgClient_step_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_step_event_pargs {
 public:


  virtual ~DbgClient_step_event_pargs() noexcept;
  const int32_t* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_stop_event_args {
 public:

  DbgClient_stop_event_args(const DbgClient_stop_event_args&);
  DbgClient_stop_event_args& operator=(const DbgClient_stop_event_args&);
  DbgClient_stop_event_args() {
  }

  virtual ~DbgClient_stop_event_args() noexcept;

  bool operator == (const DbgClient_stop_event_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgClient_stop_event_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgClient_stop_event_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_stop_event_pargs {
 public:


  virtual ~DbgClient_stop_event_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgClient_update_map_args__isset {
  _DbgClient_update_map_args__isset() : prev(false), curr(false), visited(false) {}
  bool prev :1;
  bool curr :1;
  bool visited :1;
} _DbgClient_update_map_args__isset;

class DbgClient_update_map_args {
 public:

  DbgClient_update_map_args(const DbgClient_update_map_args&);
  DbgClient_update_map_args& operator=(const DbgClient_update_map_args&);
  DbgClient_update_map_args() : prev(0), curr(0), visited(0) {
  }

  virtual ~DbgClient_update_map_args() noexcept;
  int32_t prev;
  int32_t curr;
  bool visited;

  _DbgClient_update_map_args__isset __isset;

  void __set_prev(const int32_t val);

  void __set_curr(const int32_t val);

  void __set_visited(const bool val);

  bool operator == (const DbgClient_update_map_args & rhs) const
  {
    if (!(prev == rhs.prev))
      return false;
    if (!(curr == rhs.curr))
      return false;
    if (!(visited == rhs.visited))
      return false;
    return true;
  }
  bool operator != (const DbgClient_update_map_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgClient_update_map_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgClient_update_map_pargs {
 public:


  virtual ~DbgClient_update_map_pargs() noexcept;
  const int32_t* prev;
  const int32_t* curr;
  const bool* visited;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class DbgClientClient : virtual public DbgClientIf {
 public:
  DbgClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DbgClientClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start_event();
  void send_start_event();
  void pause_event(const int32_t address);
  void send_pause_event(const int32_t address);
  void break_event(const int32_t address);
  void send_break_event(const int32_t address);
  void step_event(const int32_t address);
  void send_step_event(const int32_t address);
  void stop_event();
  void send_stop_event();
  void update_map(const int32_t prev, const int32_t curr, const bool visited);
  void send_update_map(const int32_t prev, const int32_t curr, const bool visited);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DbgClientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DbgClientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DbgClientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_start_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pause_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_break_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_step_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop_event(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_map(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DbgClientProcessor(::std::shared_ptr<DbgClientIf> iface) :
    iface_(iface) {
    processMap_["start_event"] = &DbgClientProcessor::process_start_event;
    processMap_["pause_event"] = &DbgClientProcessor::process_pause_event;
    processMap_["break_event"] = &DbgClientProcessor::process_break_event;
    processMap_["step_event"] = &DbgClientProcessor::process_step_event;
    processMap_["stop_event"] = &DbgClientProcessor::process_stop_event;
    processMap_["update_map"] = &DbgClientProcessor::process_update_map;
  }

  virtual ~DbgClientProcessor() {}
};

class DbgClientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DbgClientProcessorFactory(const ::std::shared_ptr< DbgClientIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< DbgClientIfFactory > handlerFactory_;
};

class DbgClientMultiface : virtual public DbgClientIf {
 public:
  DbgClientMultiface(std::vector<std::shared_ptr<DbgClientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DbgClientMultiface() {}
 protected:
  std::vector<std::shared_ptr<DbgClientIf> > ifaces_;
  DbgClientMultiface() {}
  void add(::std::shared_ptr<DbgClientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void start_event() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_event();
    }
    ifaces_[i]->start_event();
  }

  void pause_event(const int32_t address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pause_event(address);
    }
    ifaces_[i]->pause_event(address);
  }

  void break_event(const int32_t address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->break_event(address);
    }
    ifaces_[i]->break_event(address);
  }

  void step_event(const int32_t address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->step_event(address);
    }
    ifaces_[i]->step_event(address);
  }

  void stop_event() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop_event();
    }
    ifaces_[i]->stop_event();
  }

  void update_map(const int32_t prev, const int32_t curr, const bool visited) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_map(prev, curr, visited);
    }
    ifaces_[i]->update_map(prev, curr, visited);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DbgClientConcurrentClient : virtual public DbgClientIf {
 public:
  DbgClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DbgClientConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void start_event();
  void send_start_event();
  void pause_event(const int32_t address);
  void send_pause_event(const int32_t address);
  void break_event(const int32_t address);
  void send_break_event(const int32_t address);
  void step_event(const int32_t address);
  void send_step_event(const int32_t address);
  void stop_event();
  void send_stop_event();
  void update_map(const int32_t prev, const int32_t curr, const bool visited);
  void send_update_map(const int32_t prev, const int32_t curr, const bool visited);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
