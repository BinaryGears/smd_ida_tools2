/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "debug_proto_68k_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kGpRegsEnumValues[] = {
  GpRegsEnum::D0,
  GpRegsEnum::D1,
  GpRegsEnum::D2,
  GpRegsEnum::D3,
  GpRegsEnum::D4,
  GpRegsEnum::D5,
  GpRegsEnum::D6,
  GpRegsEnum::D7,
  GpRegsEnum::A0,
  GpRegsEnum::A1,
  GpRegsEnum::A2,
  GpRegsEnum::A3,
  GpRegsEnum::A4,
  GpRegsEnum::A5,
  GpRegsEnum::A6,
  GpRegsEnum::A7,
  GpRegsEnum::PC,
  GpRegsEnum::SR,
  GpRegsEnum::SP
};
const char* _kGpRegsEnumNames[] = {
  "D0",
  "D1",
  "D2",
  "D3",
  "D4",
  "D5",
  "D6",
  "D7",
  "A0",
  "A1",
  "A2",
  "A3",
  "A4",
  "A5",
  "A6",
  "A7",
  "PC",
  "SR",
  "SP"
};
const std::map<int, const char*> _GpRegsEnum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(19, _kGpRegsEnumValues, _kGpRegsEnumNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const GpRegsEnum::type& val) {
  std::map<int, const char*>::const_iterator it = _GpRegsEnum_VALUES_TO_NAMES.find(val);
  if (it != _GpRegsEnum_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const GpRegsEnum::type& val) {
  std::map<int, const char*>::const_iterator it = _GpRegsEnum_VALUES_TO_NAMES.find(val);
  if (it != _GpRegsEnum_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kVdpRegsEnumValues[] = {
  VdpRegsEnum::V00,
  VdpRegsEnum::V01,
  VdpRegsEnum::V02,
  VdpRegsEnum::V03,
  VdpRegsEnum::V04,
  VdpRegsEnum::V05,
  VdpRegsEnum::V06,
  VdpRegsEnum::V07,
  VdpRegsEnum::V08,
  VdpRegsEnum::V09,
  VdpRegsEnum::V0A,
  VdpRegsEnum::V0B,
  VdpRegsEnum::V0C,
  VdpRegsEnum::V0D,
  VdpRegsEnum::V0E,
  VdpRegsEnum::V0F,
  VdpRegsEnum::V10,
  VdpRegsEnum::V11,
  VdpRegsEnum::V12,
  VdpRegsEnum::V13,
  VdpRegsEnum::V14,
  VdpRegsEnum::V15,
  VdpRegsEnum::V16,
  VdpRegsEnum::V17
};
const char* _kVdpRegsEnumNames[] = {
  "V00",
  "V01",
  "V02",
  "V03",
  "V04",
  "V05",
  "V06",
  "V07",
  "V08",
  "V09",
  "V0A",
  "V0B",
  "V0C",
  "V0D",
  "V0E",
  "V0F",
  "V10",
  "V11",
  "V12",
  "V13",
  "V14",
  "V15",
  "V16",
  "V17"
};
const std::map<int, const char*> _VdpRegsEnum_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(24, _kVdpRegsEnumValues, _kVdpRegsEnumNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const VdpRegsEnum::type& val) {
  std::map<int, const char*>::const_iterator it = _VdpRegsEnum_VALUES_TO_NAMES.find(val);
  if (it != _VdpRegsEnum_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const VdpRegsEnum::type& val) {
  std::map<int, const char*>::const_iterator it = _VdpRegsEnum_VALUES_TO_NAMES.find(val);
  if (it != _VdpRegsEnum_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kBpTypeValues[] = {
  BpType::BP_PC,
  BpType::BP_READ,
  BpType::BP_WRITE
};
const char* _kBpTypeNames[] = {
  "BP_PC",
  "BP_READ",
  "BP_WRITE"
};
const std::map<int, const char*> _BpType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBpTypeValues, _kBpTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const BpType::type& val) {
  std::map<int, const char*>::const_iterator it = _BpType_VALUES_TO_NAMES.find(val);
  if (it != _BpType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const BpType::type& val) {
  std::map<int, const char*>::const_iterator it = _BpType_VALUES_TO_NAMES.find(val);
  if (it != _BpType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


GpRegister::~GpRegister() noexcept {
}


void GpRegister::__set_index(const GpRegsEnum::type val) {
  this->index = val;
}

void GpRegister::__set_value(const int32_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const GpRegister& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GpRegister::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->index = (GpRegsEnum::type)ecast0;
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GpRegister::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GpRegister");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GpRegister &a, GpRegister &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

GpRegister::GpRegister(const GpRegister& other1) {
  index = other1.index;
  value = other1.value;
  __isset = other1.__isset;
}
GpRegister& GpRegister::operator=(const GpRegister& other2) {
  index = other2.index;
  value = other2.value;
  __isset = other2.__isset;
  return *this;
}
void GpRegister::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GpRegister(";
  out << "index=" << to_string(index);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


GpRegisters::~GpRegisters() noexcept {
}


void GpRegisters::__set_D0(const int32_t val) {
  this->D0 = val;
}

void GpRegisters::__set_D1(const int32_t val) {
  this->D1 = val;
}

void GpRegisters::__set_D2(const int32_t val) {
  this->D2 = val;
}

void GpRegisters::__set_D3(const int32_t val) {
  this->D3 = val;
}

void GpRegisters::__set_D4(const int32_t val) {
  this->D4 = val;
}

void GpRegisters::__set_D5(const int32_t val) {
  this->D5 = val;
}

void GpRegisters::__set_D6(const int32_t val) {
  this->D6 = val;
}

void GpRegisters::__set_D7(const int32_t val) {
  this->D7 = val;
}

void GpRegisters::__set_A0(const int32_t val) {
  this->A0 = val;
}

void GpRegisters::__set_A1(const int32_t val) {
  this->A1 = val;
}

void GpRegisters::__set_A2(const int32_t val) {
  this->A2 = val;
}

void GpRegisters::__set_A3(const int32_t val) {
  this->A3 = val;
}

void GpRegisters::__set_A4(const int32_t val) {
  this->A4 = val;
}

void GpRegisters::__set_A5(const int32_t val) {
  this->A5 = val;
}

void GpRegisters::__set_A6(const int32_t val) {
  this->A6 = val;
}

void GpRegisters::__set_A7(const int32_t val) {
  this->A7 = val;
}

void GpRegisters::__set_PC(const int32_t val) {
  this->PC = val;
}

void GpRegisters::__set_SR(const int32_t val) {
  this->SR = val;
}

void GpRegisters::__set_SP(const int32_t val) {
  this->SP = val;
}
std::ostream& operator<<(std::ostream& out, const GpRegisters& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t GpRegisters::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D0);
          this->__isset.D0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D1);
          this->__isset.D1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D2);
          this->__isset.D2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D3);
          this->__isset.D3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D4);
          this->__isset.D4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D5);
          this->__isset.D5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D6);
          this->__isset.D6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->D7);
          this->__isset.D7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A0);
          this->__isset.A0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A1);
          this->__isset.A1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A2);
          this->__isset.A2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A3);
          this->__isset.A3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A4);
          this->__isset.A4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A5);
          this->__isset.A5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A6);
          this->__isset.A6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->A7);
          this->__isset.A7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->PC);
          this->__isset.PC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SR);
          this->__isset.SR = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->SP);
          this->__isset.SP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GpRegisters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GpRegisters");

  xfer += oprot->writeFieldBegin("D0", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->D0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D1", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->D1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D2", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->D2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D3", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->D3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D4", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->D4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D5", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->D5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D6", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->D6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("D7", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->D7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A0", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->A0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A1", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->A1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A2", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->A2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A3", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->A3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A4", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->A4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A5", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->A5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A6", ::apache::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->A6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("A7", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->A7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("PC", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->PC);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SR", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->SR);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("SP", ::apache::thrift::protocol::T_I32, 19);
  xfer += oprot->writeI32(this->SP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GpRegisters &a, GpRegisters &b) {
  using ::std::swap;
  swap(a.D0, b.D0);
  swap(a.D1, b.D1);
  swap(a.D2, b.D2);
  swap(a.D3, b.D3);
  swap(a.D4, b.D4);
  swap(a.D5, b.D5);
  swap(a.D6, b.D6);
  swap(a.D7, b.D7);
  swap(a.A0, b.A0);
  swap(a.A1, b.A1);
  swap(a.A2, b.A2);
  swap(a.A3, b.A3);
  swap(a.A4, b.A4);
  swap(a.A5, b.A5);
  swap(a.A6, b.A6);
  swap(a.A7, b.A7);
  swap(a.PC, b.PC);
  swap(a.SR, b.SR);
  swap(a.SP, b.SP);
  swap(a.__isset, b.__isset);
}

GpRegisters::GpRegisters(const GpRegisters& other3) {
  D0 = other3.D0;
  D1 = other3.D1;
  D2 = other3.D2;
  D3 = other3.D3;
  D4 = other3.D4;
  D5 = other3.D5;
  D6 = other3.D6;
  D7 = other3.D7;
  A0 = other3.A0;
  A1 = other3.A1;
  A2 = other3.A2;
  A3 = other3.A3;
  A4 = other3.A4;
  A5 = other3.A5;
  A6 = other3.A6;
  A7 = other3.A7;
  PC = other3.PC;
  SR = other3.SR;
  SP = other3.SP;
  __isset = other3.__isset;
}
GpRegisters& GpRegisters::operator=(const GpRegisters& other4) {
  D0 = other4.D0;
  D1 = other4.D1;
  D2 = other4.D2;
  D3 = other4.D3;
  D4 = other4.D4;
  D5 = other4.D5;
  D6 = other4.D6;
  D7 = other4.D7;
  A0 = other4.A0;
  A1 = other4.A1;
  A2 = other4.A2;
  A3 = other4.A3;
  A4 = other4.A4;
  A5 = other4.A5;
  A6 = other4.A6;
  A7 = other4.A7;
  PC = other4.PC;
  SR = other4.SR;
  SP = other4.SP;
  __isset = other4.__isset;
  return *this;
}
void GpRegisters::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GpRegisters(";
  out << "D0=" << to_string(D0);
  out << ", " << "D1=" << to_string(D1);
  out << ", " << "D2=" << to_string(D2);
  out << ", " << "D3=" << to_string(D3);
  out << ", " << "D4=" << to_string(D4);
  out << ", " << "D5=" << to_string(D5);
  out << ", " << "D6=" << to_string(D6);
  out << ", " << "D7=" << to_string(D7);
  out << ", " << "A0=" << to_string(A0);
  out << ", " << "A1=" << to_string(A1);
  out << ", " << "A2=" << to_string(A2);
  out << ", " << "A3=" << to_string(A3);
  out << ", " << "A4=" << to_string(A4);
  out << ", " << "A5=" << to_string(A5);
  out << ", " << "A6=" << to_string(A6);
  out << ", " << "A7=" << to_string(A7);
  out << ", " << "PC=" << to_string(PC);
  out << ", " << "SR=" << to_string(SR);
  out << ", " << "SP=" << to_string(SP);
  out << ")";
}


VdpRegister::~VdpRegister() noexcept {
}


void VdpRegister::__set_index(const VdpRegsEnum::type val) {
  this->index = val;
}

void VdpRegister::__set_value(const int16_t val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const VdpRegister& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VdpRegister::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          this->index = (VdpRegsEnum::type)ecast5;
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VdpRegister::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VdpRegister");

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VdpRegister &a, VdpRegister &b) {
  using ::std::swap;
  swap(a.index, b.index);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

VdpRegister::VdpRegister(const VdpRegister& other6) {
  index = other6.index;
  value = other6.value;
  __isset = other6.__isset;
}
VdpRegister& VdpRegister::operator=(const VdpRegister& other7) {
  index = other7.index;
  value = other7.value;
  __isset = other7.__isset;
  return *this;
}
void VdpRegister::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VdpRegister(";
  out << "index=" << to_string(index);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


VdpRegisters::~VdpRegisters() noexcept {
}


void VdpRegisters::__set_V00(const int16_t val) {
  this->V00 = val;
}

void VdpRegisters::__set_V01(const int16_t val) {
  this->V01 = val;
}

void VdpRegisters::__set_V02(const int16_t val) {
  this->V02 = val;
}

void VdpRegisters::__set_V03(const int16_t val) {
  this->V03 = val;
}

void VdpRegisters::__set_V04(const int16_t val) {
  this->V04 = val;
}

void VdpRegisters::__set_V05(const int16_t val) {
  this->V05 = val;
}

void VdpRegisters::__set_V06(const int16_t val) {
  this->V06 = val;
}

void VdpRegisters::__set_V07(const int16_t val) {
  this->V07 = val;
}

void VdpRegisters::__set_V08(const int16_t val) {
  this->V08 = val;
}

void VdpRegisters::__set_V09(const int16_t val) {
  this->V09 = val;
}

void VdpRegisters::__set_V0A(const int16_t val) {
  this->V0A = val;
}

void VdpRegisters::__set_V0B(const int16_t val) {
  this->V0B = val;
}

void VdpRegisters::__set_V0C(const int16_t val) {
  this->V0C = val;
}

void VdpRegisters::__set_V0D(const int16_t val) {
  this->V0D = val;
}

void VdpRegisters::__set_V0E(const int16_t val) {
  this->V0E = val;
}

void VdpRegisters::__set_V0F(const int16_t val) {
  this->V0F = val;
}

void VdpRegisters::__set_V10(const int16_t val) {
  this->V10 = val;
}

void VdpRegisters::__set_V11(const int16_t val) {
  this->V11 = val;
}

void VdpRegisters::__set_V12(const int16_t val) {
  this->V12 = val;
}

void VdpRegisters::__set_V13(const int16_t val) {
  this->V13 = val;
}

void VdpRegisters::__set_V14(const int16_t val) {
  this->V14 = val;
}

void VdpRegisters::__set_V15(const int16_t val) {
  this->V15 = val;
}

void VdpRegisters::__set_V16(const int16_t val) {
  this->V16 = val;
}

void VdpRegisters::__set_V17(const int16_t val) {
  this->V17 = val;
}
std::ostream& operator<<(std::ostream& out, const VdpRegisters& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VdpRegisters::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V00);
          this->__isset.V00 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V01);
          this->__isset.V01 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V02);
          this->__isset.V02 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V03);
          this->__isset.V03 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V04);
          this->__isset.V04 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V05);
          this->__isset.V05 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V06);
          this->__isset.V06 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V07);
          this->__isset.V07 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V08);
          this->__isset.V08 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V09);
          this->__isset.V09 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V0A);
          this->__isset.V0A = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V0B);
          this->__isset.V0B = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V0C);
          this->__isset.V0C = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V0D);
          this->__isset.V0D = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V0E);
          this->__isset.V0E = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V0F);
          this->__isset.V0F = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V10);
          this->__isset.V10 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V11);
          this->__isset.V11 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V12);
          this->__isset.V12 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V13);
          this->__isset.V13 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V14);
          this->__isset.V14 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V15);
          this->__isset.V15 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V16);
          this->__isset.V16 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->V17);
          this->__isset.V17 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VdpRegisters::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VdpRegisters");

  xfer += oprot->writeFieldBegin("V00", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->V00);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V01", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->V01);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V02", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->V02);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V03", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->V03);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V04", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->V04);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V05", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->V05);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V06", ::apache::thrift::protocol::T_I16, 7);
  xfer += oprot->writeI16(this->V06);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V07", ::apache::thrift::protocol::T_I16, 8);
  xfer += oprot->writeI16(this->V07);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V08", ::apache::thrift::protocol::T_I16, 9);
  xfer += oprot->writeI16(this->V08);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V09", ::apache::thrift::protocol::T_I16, 10);
  xfer += oprot->writeI16(this->V09);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V0A", ::apache::thrift::protocol::T_I16, 11);
  xfer += oprot->writeI16(this->V0A);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V0B", ::apache::thrift::protocol::T_I16, 12);
  xfer += oprot->writeI16(this->V0B);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V0C", ::apache::thrift::protocol::T_I16, 13);
  xfer += oprot->writeI16(this->V0C);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V0D", ::apache::thrift::protocol::T_I16, 14);
  xfer += oprot->writeI16(this->V0D);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V0E", ::apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->V0E);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V0F", ::apache::thrift::protocol::T_I16, 16);
  xfer += oprot->writeI16(this->V0F);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V10", ::apache::thrift::protocol::T_I16, 17);
  xfer += oprot->writeI16(this->V10);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V11", ::apache::thrift::protocol::T_I16, 18);
  xfer += oprot->writeI16(this->V11);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V12", ::apache::thrift::protocol::T_I16, 19);
  xfer += oprot->writeI16(this->V12);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V13", ::apache::thrift::protocol::T_I16, 20);
  xfer += oprot->writeI16(this->V13);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V14", ::apache::thrift::protocol::T_I16, 21);
  xfer += oprot->writeI16(this->V14);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V15", ::apache::thrift::protocol::T_I16, 22);
  xfer += oprot->writeI16(this->V15);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V16", ::apache::thrift::protocol::T_I16, 23);
  xfer += oprot->writeI16(this->V16);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("V17", ::apache::thrift::protocol::T_I16, 24);
  xfer += oprot->writeI16(this->V17);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VdpRegisters &a, VdpRegisters &b) {
  using ::std::swap;
  swap(a.V00, b.V00);
  swap(a.V01, b.V01);
  swap(a.V02, b.V02);
  swap(a.V03, b.V03);
  swap(a.V04, b.V04);
  swap(a.V05, b.V05);
  swap(a.V06, b.V06);
  swap(a.V07, b.V07);
  swap(a.V08, b.V08);
  swap(a.V09, b.V09);
  swap(a.V0A, b.V0A);
  swap(a.V0B, b.V0B);
  swap(a.V0C, b.V0C);
  swap(a.V0D, b.V0D);
  swap(a.V0E, b.V0E);
  swap(a.V0F, b.V0F);
  swap(a.V10, b.V10);
  swap(a.V11, b.V11);
  swap(a.V12, b.V12);
  swap(a.V13, b.V13);
  swap(a.V14, b.V14);
  swap(a.V15, b.V15);
  swap(a.V16, b.V16);
  swap(a.V17, b.V17);
  swap(a.__isset, b.__isset);
}

VdpRegisters::VdpRegisters(const VdpRegisters& other8) {
  V00 = other8.V00;
  V01 = other8.V01;
  V02 = other8.V02;
  V03 = other8.V03;
  V04 = other8.V04;
  V05 = other8.V05;
  V06 = other8.V06;
  V07 = other8.V07;
  V08 = other8.V08;
  V09 = other8.V09;
  V0A = other8.V0A;
  V0B = other8.V0B;
  V0C = other8.V0C;
  V0D = other8.V0D;
  V0E = other8.V0E;
  V0F = other8.V0F;
  V10 = other8.V10;
  V11 = other8.V11;
  V12 = other8.V12;
  V13 = other8.V13;
  V14 = other8.V14;
  V15 = other8.V15;
  V16 = other8.V16;
  V17 = other8.V17;
  __isset = other8.__isset;
}
VdpRegisters& VdpRegisters::operator=(const VdpRegisters& other9) {
  V00 = other9.V00;
  V01 = other9.V01;
  V02 = other9.V02;
  V03 = other9.V03;
  V04 = other9.V04;
  V05 = other9.V05;
  V06 = other9.V06;
  V07 = other9.V07;
  V08 = other9.V08;
  V09 = other9.V09;
  V0A = other9.V0A;
  V0B = other9.V0B;
  V0C = other9.V0C;
  V0D = other9.V0D;
  V0E = other9.V0E;
  V0F = other9.V0F;
  V10 = other9.V10;
  V11 = other9.V11;
  V12 = other9.V12;
  V13 = other9.V13;
  V14 = other9.V14;
  V15 = other9.V15;
  V16 = other9.V16;
  V17 = other9.V17;
  __isset = other9.__isset;
  return *this;
}
void VdpRegisters::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VdpRegisters(";
  out << "V00=" << to_string(V00);
  out << ", " << "V01=" << to_string(V01);
  out << ", " << "V02=" << to_string(V02);
  out << ", " << "V03=" << to_string(V03);
  out << ", " << "V04=" << to_string(V04);
  out << ", " << "V05=" << to_string(V05);
  out << ", " << "V06=" << to_string(V06);
  out << ", " << "V07=" << to_string(V07);
  out << ", " << "V08=" << to_string(V08);
  out << ", " << "V09=" << to_string(V09);
  out << ", " << "V0A=" << to_string(V0A);
  out << ", " << "V0B=" << to_string(V0B);
  out << ", " << "V0C=" << to_string(V0C);
  out << ", " << "V0D=" << to_string(V0D);
  out << ", " << "V0E=" << to_string(V0E);
  out << ", " << "V0F=" << to_string(V0F);
  out << ", " << "V10=" << to_string(V10);
  out << ", " << "V11=" << to_string(V11);
  out << ", " << "V12=" << to_string(V12);
  out << ", " << "V13=" << to_string(V13);
  out << ", " << "V14=" << to_string(V14);
  out << ", " << "V15=" << to_string(V15);
  out << ", " << "V16=" << to_string(V16);
  out << ", " << "V17=" << to_string(V17);
  out << ")";
}


DmaInfo::~DmaInfo() noexcept {
}


void DmaInfo::__set_Len(const int16_t val) {
  this->Len = val;
}

void DmaInfo::__set_Src(const int32_t val) {
  this->Src = val;
}

void DmaInfo::__set_Dst(const int32_t val) {
  this->Dst = val;
}
std::ostream& operator<<(std::ostream& out, const DmaInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DmaInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->Len);
          this->__isset.Len = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Src);
          this->__isset.Src = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->Dst);
          this->__isset.Dst = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DmaInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DmaInfo");

  xfer += oprot->writeFieldBegin("Len", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->Len);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Src", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->Src);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Dst", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->Dst);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DmaInfo &a, DmaInfo &b) {
  using ::std::swap;
  swap(a.Len, b.Len);
  swap(a.Src, b.Src);
  swap(a.Dst, b.Dst);
  swap(a.__isset, b.__isset);
}

DmaInfo::DmaInfo(const DmaInfo& other10) {
  Len = other10.Len;
  Src = other10.Src;
  Dst = other10.Dst;
  __isset = other10.__isset;
}
DmaInfo& DmaInfo::operator=(const DmaInfo& other11) {
  Len = other11.Len;
  Src = other11.Src;
  Dst = other11.Dst;
  __isset = other11.__isset;
  return *this;
}
void DmaInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DmaInfo(";
  out << "Len=" << to_string(Len);
  out << ", " << "Src=" << to_string(Src);
  out << ", " << "Dst=" << to_string(Dst);
  out << ")";
}


DbgBreakpoint::~DbgBreakpoint() noexcept {
}


void DbgBreakpoint::__set_type(const BpType::type val) {
  this->type = val;
}

void DbgBreakpoint::__set_bstart(const int32_t val) {
  this->bstart = val;
}

void DbgBreakpoint::__set_bend(const int32_t val) {
  this->bend = val;
}

void DbgBreakpoint::__set_enabled(const bool val) {
  this->enabled = val;
}

void DbgBreakpoint::__set_is_vdp(const bool val) {
  this->is_vdp = val;
}

void DbgBreakpoint::__set_is_forbid(const bool val) {
  this->is_forbid = val;
}
std::ostream& operator<<(std::ostream& out, const DbgBreakpoint& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DbgBreakpoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->type = (BpType::type)ecast12;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bstart);
          this->__isset.bstart = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->bend);
          this->__isset.bend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_vdp);
          this->__isset.is_vdp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_forbid);
          this->__isset.is_forbid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DbgBreakpoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DbgBreakpoint");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bstart", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->bstart);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bend", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->bend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_vdp", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->is_vdp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_forbid", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->is_forbid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DbgBreakpoint &a, DbgBreakpoint &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.bstart, b.bstart);
  swap(a.bend, b.bend);
  swap(a.enabled, b.enabled);
  swap(a.is_vdp, b.is_vdp);
  swap(a.is_forbid, b.is_forbid);
  swap(a.__isset, b.__isset);
}

DbgBreakpoint::DbgBreakpoint(const DbgBreakpoint& other13) {
  type = other13.type;
  bstart = other13.bstart;
  bend = other13.bend;
  enabled = other13.enabled;
  is_vdp = other13.is_vdp;
  is_forbid = other13.is_forbid;
  __isset = other13.__isset;
}
DbgBreakpoint& DbgBreakpoint::operator=(const DbgBreakpoint& other14) {
  type = other14.type;
  bstart = other14.bstart;
  bend = other14.bend;
  enabled = other14.enabled;
  is_vdp = other14.is_vdp;
  is_forbid = other14.is_forbid;
  __isset = other14.__isset;
  return *this;
}
void DbgBreakpoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DbgBreakpoint(";
  out << "type=" << to_string(type);
  out << ", " << "bstart=" << to_string(bstart);
  out << ", " << "bend=" << to_string(bend);
  out << ", " << "enabled=" << to_string(enabled);
  out << ", " << "is_vdp=" << to_string(is_vdp);
  out << ", " << "is_forbid=" << to_string(is_forbid);
  out << ")";
}


