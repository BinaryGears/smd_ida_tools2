/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef debug_proto_68k_TYPES_H
#define debug_proto_68k_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct GpRegsEnum {
  enum type {
    D0 = 0,
    D1 = 1,
    D2 = 2,
    D3 = 3,
    D4 = 4,
    D5 = 5,
    D6 = 6,
    D7 = 7,
    A0 = 8,
    A1 = 9,
    A2 = 10,
    A3 = 11,
    A4 = 12,
    A5 = 13,
    A6 = 14,
    A7 = 15,
    PC = 16,
    SR = 17,
    SP = 18
  };
};

extern const std::map<int, const char*> _GpRegsEnum_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GpRegsEnum::type& val);

std::string to_string(const GpRegsEnum::type& val);

struct VdpRegsEnum {
  enum type {
    V00 = 0,
    V01 = 1,
    V02 = 2,
    V03 = 3,
    V04 = 4,
    V05 = 5,
    V06 = 6,
    V07 = 7,
    V08 = 8,
    V09 = 9,
    V0A = 10,
    V0B = 11,
    V0C = 12,
    V0D = 13,
    V0E = 14,
    V0F = 15,
    V10 = 16,
    V11 = 17,
    V12 = 18,
    V13 = 19,
    V14 = 20,
    V15 = 21,
    V16 = 22,
    V17 = 23
  };
};

extern const std::map<int, const char*> _VdpRegsEnum_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const VdpRegsEnum::type& val);

std::string to_string(const VdpRegsEnum::type& val);

struct BpType {
  enum type {
    BP_PC = 1,
    BP_READ = 2,
    BP_WRITE = 3
  };
};

extern const std::map<int, const char*> _BpType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BpType::type& val);

std::string to_string(const BpType::type& val);

class GpRegister;

class GpRegisters;

class VdpRegister;

class VdpRegisters;

class DmaInfo;

class DbgBreakpoint;

typedef struct _GpRegister__isset {
  _GpRegister__isset() : index(false), value(false) {}
  bool index :1;
  bool value :1;
} _GpRegister__isset;

class GpRegister : public virtual ::apache::thrift::TBase {
 public:

  GpRegister(const GpRegister&);
  GpRegister& operator=(const GpRegister&);
  GpRegister() : index((GpRegsEnum::type)0), value(0) {
  }

  virtual ~GpRegister() noexcept;
  /**
   * 
   * @see GpRegsEnum
   */
  GpRegsEnum::type index;
  int32_t value;

  _GpRegister__isset __isset;

  void __set_index(const GpRegsEnum::type val);

  void __set_value(const int32_t val);

  bool operator == (const GpRegister & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const GpRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GpRegister &a, GpRegister &b);

std::ostream& operator<<(std::ostream& out, const GpRegister& obj);

typedef struct _GpRegisters__isset {
  _GpRegisters__isset() : D0(false), D1(false), D2(false), D3(false), D4(false), D5(false), D6(false), D7(false), A0(false), A1(false), A2(false), A3(false), A4(false), A5(false), A6(false), A7(false), PC(false), SR(false), SP(false) {}
  bool D0 :1;
  bool D1 :1;
  bool D2 :1;
  bool D3 :1;
  bool D4 :1;
  bool D5 :1;
  bool D6 :1;
  bool D7 :1;
  bool A0 :1;
  bool A1 :1;
  bool A2 :1;
  bool A3 :1;
  bool A4 :1;
  bool A5 :1;
  bool A6 :1;
  bool A7 :1;
  bool PC :1;
  bool SR :1;
  bool SP :1;
} _GpRegisters__isset;

class GpRegisters : public virtual ::apache::thrift::TBase {
 public:

  GpRegisters(const GpRegisters&);
  GpRegisters& operator=(const GpRegisters&);
  GpRegisters() : D0(0), D1(0), D2(0), D3(0), D4(0), D5(0), D6(0), D7(0), A0(0), A1(0), A2(0), A3(0), A4(0), A5(0), A6(0), A7(0), PC(0), SR(0), SP(0) {
  }

  virtual ~GpRegisters() noexcept;
  int32_t D0;
  int32_t D1;
  int32_t D2;
  int32_t D3;
  int32_t D4;
  int32_t D5;
  int32_t D6;
  int32_t D7;
  int32_t A0;
  int32_t A1;
  int32_t A2;
  int32_t A3;
  int32_t A4;
  int32_t A5;
  int32_t A6;
  int32_t A7;
  int32_t PC;
  int32_t SR;
  int32_t SP;

  _GpRegisters__isset __isset;

  void __set_D0(const int32_t val);

  void __set_D1(const int32_t val);

  void __set_D2(const int32_t val);

  void __set_D3(const int32_t val);

  void __set_D4(const int32_t val);

  void __set_D5(const int32_t val);

  void __set_D6(const int32_t val);

  void __set_D7(const int32_t val);

  void __set_A0(const int32_t val);

  void __set_A1(const int32_t val);

  void __set_A2(const int32_t val);

  void __set_A3(const int32_t val);

  void __set_A4(const int32_t val);

  void __set_A5(const int32_t val);

  void __set_A6(const int32_t val);

  void __set_A7(const int32_t val);

  void __set_PC(const int32_t val);

  void __set_SR(const int32_t val);

  void __set_SP(const int32_t val);

  bool operator == (const GpRegisters & rhs) const
  {
    if (!(D0 == rhs.D0))
      return false;
    if (!(D1 == rhs.D1))
      return false;
    if (!(D2 == rhs.D2))
      return false;
    if (!(D3 == rhs.D3))
      return false;
    if (!(D4 == rhs.D4))
      return false;
    if (!(D5 == rhs.D5))
      return false;
    if (!(D6 == rhs.D6))
      return false;
    if (!(D7 == rhs.D7))
      return false;
    if (!(A0 == rhs.A0))
      return false;
    if (!(A1 == rhs.A1))
      return false;
    if (!(A2 == rhs.A2))
      return false;
    if (!(A3 == rhs.A3))
      return false;
    if (!(A4 == rhs.A4))
      return false;
    if (!(A5 == rhs.A5))
      return false;
    if (!(A6 == rhs.A6))
      return false;
    if (!(A7 == rhs.A7))
      return false;
    if (!(PC == rhs.PC))
      return false;
    if (!(SR == rhs.SR))
      return false;
    if (!(SP == rhs.SP))
      return false;
    return true;
  }
  bool operator != (const GpRegisters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpRegisters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GpRegisters &a, GpRegisters &b);

std::ostream& operator<<(std::ostream& out, const GpRegisters& obj);

typedef struct _VdpRegister__isset {
  _VdpRegister__isset() : index(false), value(false) {}
  bool index :1;
  bool value :1;
} _VdpRegister__isset;

class VdpRegister : public virtual ::apache::thrift::TBase {
 public:

  VdpRegister(const VdpRegister&);
  VdpRegister& operator=(const VdpRegister&);
  VdpRegister() : index((VdpRegsEnum::type)0), value(0) {
  }

  virtual ~VdpRegister() noexcept;
  /**
   * 
   * @see VdpRegsEnum
   */
  VdpRegsEnum::type index;
  int16_t value;

  _VdpRegister__isset __isset;

  void __set_index(const VdpRegsEnum::type val);

  void __set_value(const int16_t val);

  bool operator == (const VdpRegister & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const VdpRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdpRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VdpRegister &a, VdpRegister &b);

std::ostream& operator<<(std::ostream& out, const VdpRegister& obj);

typedef struct _VdpRegisters__isset {
  _VdpRegisters__isset() : V00(false), V01(false), V02(false), V03(false), V04(false), V05(false), V06(false), V07(false), V08(false), V09(false), V0A(false), V0B(false), V0C(false), V0D(false), V0E(false), V0F(false), V10(false), V11(false), V12(false), V13(false), V14(false), V15(false), V16(false), V17(false) {}
  bool V00 :1;
  bool V01 :1;
  bool V02 :1;
  bool V03 :1;
  bool V04 :1;
  bool V05 :1;
  bool V06 :1;
  bool V07 :1;
  bool V08 :1;
  bool V09 :1;
  bool V0A :1;
  bool V0B :1;
  bool V0C :1;
  bool V0D :1;
  bool V0E :1;
  bool V0F :1;
  bool V10 :1;
  bool V11 :1;
  bool V12 :1;
  bool V13 :1;
  bool V14 :1;
  bool V15 :1;
  bool V16 :1;
  bool V17 :1;
} _VdpRegisters__isset;

class VdpRegisters : public virtual ::apache::thrift::TBase {
 public:

  VdpRegisters(const VdpRegisters&);
  VdpRegisters& operator=(const VdpRegisters&);
  VdpRegisters() : V00(0), V01(0), V02(0), V03(0), V04(0), V05(0), V06(0), V07(0), V08(0), V09(0), V0A(0), V0B(0), V0C(0), V0D(0), V0E(0), V0F(0), V10(0), V11(0), V12(0), V13(0), V14(0), V15(0), V16(0), V17(0) {
  }

  virtual ~VdpRegisters() noexcept;
  int16_t V00;
  int16_t V01;
  int16_t V02;
  int16_t V03;
  int16_t V04;
  int16_t V05;
  int16_t V06;
  int16_t V07;
  int16_t V08;
  int16_t V09;
  int16_t V0A;
  int16_t V0B;
  int16_t V0C;
  int16_t V0D;
  int16_t V0E;
  int16_t V0F;
  int16_t V10;
  int16_t V11;
  int16_t V12;
  int16_t V13;
  int16_t V14;
  int16_t V15;
  int16_t V16;
  int16_t V17;

  _VdpRegisters__isset __isset;

  void __set_V00(const int16_t val);

  void __set_V01(const int16_t val);

  void __set_V02(const int16_t val);

  void __set_V03(const int16_t val);

  void __set_V04(const int16_t val);

  void __set_V05(const int16_t val);

  void __set_V06(const int16_t val);

  void __set_V07(const int16_t val);

  void __set_V08(const int16_t val);

  void __set_V09(const int16_t val);

  void __set_V0A(const int16_t val);

  void __set_V0B(const int16_t val);

  void __set_V0C(const int16_t val);

  void __set_V0D(const int16_t val);

  void __set_V0E(const int16_t val);

  void __set_V0F(const int16_t val);

  void __set_V10(const int16_t val);

  void __set_V11(const int16_t val);

  void __set_V12(const int16_t val);

  void __set_V13(const int16_t val);

  void __set_V14(const int16_t val);

  void __set_V15(const int16_t val);

  void __set_V16(const int16_t val);

  void __set_V17(const int16_t val);

  bool operator == (const VdpRegisters & rhs) const
  {
    if (!(V00 == rhs.V00))
      return false;
    if (!(V01 == rhs.V01))
      return false;
    if (!(V02 == rhs.V02))
      return false;
    if (!(V03 == rhs.V03))
      return false;
    if (!(V04 == rhs.V04))
      return false;
    if (!(V05 == rhs.V05))
      return false;
    if (!(V06 == rhs.V06))
      return false;
    if (!(V07 == rhs.V07))
      return false;
    if (!(V08 == rhs.V08))
      return false;
    if (!(V09 == rhs.V09))
      return false;
    if (!(V0A == rhs.V0A))
      return false;
    if (!(V0B == rhs.V0B))
      return false;
    if (!(V0C == rhs.V0C))
      return false;
    if (!(V0D == rhs.V0D))
      return false;
    if (!(V0E == rhs.V0E))
      return false;
    if (!(V0F == rhs.V0F))
      return false;
    if (!(V10 == rhs.V10))
      return false;
    if (!(V11 == rhs.V11))
      return false;
    if (!(V12 == rhs.V12))
      return false;
    if (!(V13 == rhs.V13))
      return false;
    if (!(V14 == rhs.V14))
      return false;
    if (!(V15 == rhs.V15))
      return false;
    if (!(V16 == rhs.V16))
      return false;
    if (!(V17 == rhs.V17))
      return false;
    return true;
  }
  bool operator != (const VdpRegisters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VdpRegisters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VdpRegisters &a, VdpRegisters &b);

std::ostream& operator<<(std::ostream& out, const VdpRegisters& obj);

typedef struct _DmaInfo__isset {
  _DmaInfo__isset() : Len(false), Src(false), Dst(false) {}
  bool Len :1;
  bool Src :1;
  bool Dst :1;
} _DmaInfo__isset;

class DmaInfo : public virtual ::apache::thrift::TBase {
 public:

  DmaInfo(const DmaInfo&);
  DmaInfo& operator=(const DmaInfo&);
  DmaInfo() : Len(0), Src(0), Dst(0) {
  }

  virtual ~DmaInfo() noexcept;
  int16_t Len;
  int32_t Src;
  int32_t Dst;

  _DmaInfo__isset __isset;

  void __set_Len(const int16_t val);

  void __set_Src(const int32_t val);

  void __set_Dst(const int32_t val);

  bool operator == (const DmaInfo & rhs) const
  {
    if (!(Len == rhs.Len))
      return false;
    if (!(Src == rhs.Src))
      return false;
    if (!(Dst == rhs.Dst))
      return false;
    return true;
  }
  bool operator != (const DmaInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DmaInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DmaInfo &a, DmaInfo &b);

std::ostream& operator<<(std::ostream& out, const DmaInfo& obj);

typedef struct _DbgBreakpoint__isset {
  _DbgBreakpoint__isset() : type(false), bstart(false), bend(false), enabled(false), is_vdp(false), is_forbid(false) {}
  bool type :1;
  bool bstart :1;
  bool bend :1;
  bool enabled :1;
  bool is_vdp :1;
  bool is_forbid :1;
} _DbgBreakpoint__isset;

class DbgBreakpoint : public virtual ::apache::thrift::TBase {
 public:

  DbgBreakpoint(const DbgBreakpoint&);
  DbgBreakpoint& operator=(const DbgBreakpoint&);
  DbgBreakpoint() : type((BpType::type)0), bstart(0), bend(0), enabled(0), is_vdp(0), is_forbid(0) {
  }

  virtual ~DbgBreakpoint() noexcept;
  /**
   * 
   * @see BpType
   */
  BpType::type type;
  int32_t bstart;
  int32_t bend;
  bool enabled;
  bool is_vdp;
  bool is_forbid;

  _DbgBreakpoint__isset __isset;

  void __set_type(const BpType::type val);

  void __set_bstart(const int32_t val);

  void __set_bend(const int32_t val);

  void __set_enabled(const bool val);

  void __set_is_vdp(const bool val);

  void __set_is_forbid(const bool val);

  bool operator == (const DbgBreakpoint & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(bstart == rhs.bstart))
      return false;
    if (!(bend == rhs.bend))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    if (!(is_vdp == rhs.is_vdp))
      return false;
    if (!(is_forbid == rhs.is_forbid))
      return false;
    return true;
  }
  bool operator != (const DbgBreakpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgBreakpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DbgBreakpoint &a, DbgBreakpoint &b);

std::ostream& operator<<(std::ostream& out, const DbgBreakpoint& obj);



#endif
