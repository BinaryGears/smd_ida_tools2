/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DbgServer_H
#define DbgServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "debug_proto_z80_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DbgServerIf {
 public:
  virtual ~DbgServerIf() {}
  virtual int32_t get_gp_reg(const GpRegsEnum::type index) = 0;
  virtual void get_gp_regs(GpRegisters& _return) = 0;
  virtual void set_gp_reg(const GpRegister& reg) = 0;
  virtual void read_memory(std::string& _return, const int32_t address, const int32_t size) = 0;
  virtual void write_memory(const int32_t address, const std::string& data) = 0;
  virtual void get_breakpoints(std::vector<DbgBreakpoint> & _return) = 0;
  virtual void add_breakpoint(const DbgBreakpoint& bpt) = 0;
  virtual void toggle_breakpoint(const DbgBreakpoint& bpt) = 0;
  virtual void update_breakpoint(const DbgBreakpoint& bpt) = 0;
  virtual void del_breakpoint(const DbgBreakpoint& bpt) = 0;
  virtual void clear_breakpoints() = 0;
  virtual void pause() = 0;
  virtual void resume() = 0;
  virtual void start_emulation() = 0;
  virtual void exit_emulation() = 0;
  virtual void step_into() = 0;
  virtual void step_over() = 0;
  virtual void get_callstack(std::vector<int32_t> & _return) = 0;
  virtual void get_sound_banks(std::map<int32_t, SoundBankRange> & _return) = 0;
};

class DbgServerIfFactory {
 public:
  typedef DbgServerIf Handler;

  virtual ~DbgServerIfFactory() {}

  virtual DbgServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DbgServerIf* /* handler */) = 0;
};

class DbgServerIfSingletonFactory : virtual public DbgServerIfFactory {
 public:
  DbgServerIfSingletonFactory(const ::std::shared_ptr<DbgServerIf>& iface) : iface_(iface) {}
  virtual ~DbgServerIfSingletonFactory() {}

  virtual DbgServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DbgServerIf* /* handler */) {}

 protected:
  ::std::shared_ptr<DbgServerIf> iface_;
};

class DbgServerNull : virtual public DbgServerIf {
 public:
  virtual ~DbgServerNull() {}
  int32_t get_gp_reg(const GpRegsEnum::type /* index */) {
    int32_t _return = 0;
    return _return;
  }
  void get_gp_regs(GpRegisters& /* _return */) {
    return;
  }
  void set_gp_reg(const GpRegister& /* reg */) {
    return;
  }
  void read_memory(std::string& /* _return */, const int32_t /* address */, const int32_t /* size */) {
    return;
  }
  void write_memory(const int32_t /* address */, const std::string& /* data */) {
    return;
  }
  void get_breakpoints(std::vector<DbgBreakpoint> & /* _return */) {
    return;
  }
  void add_breakpoint(const DbgBreakpoint& /* bpt */) {
    return;
  }
  void toggle_breakpoint(const DbgBreakpoint& /* bpt */) {
    return;
  }
  void update_breakpoint(const DbgBreakpoint& /* bpt */) {
    return;
  }
  void del_breakpoint(const DbgBreakpoint& /* bpt */) {
    return;
  }
  void clear_breakpoints() {
    return;
  }
  void pause() {
    return;
  }
  void resume() {
    return;
  }
  void start_emulation() {
    return;
  }
  void exit_emulation() {
    return;
  }
  void step_into() {
    return;
  }
  void step_over() {
    return;
  }
  void get_callstack(std::vector<int32_t> & /* _return */) {
    return;
  }
  void get_sound_banks(std::map<int32_t, SoundBankRange> & /* _return */) {
    return;
  }
};

typedef struct _DbgServer_get_gp_reg_args__isset {
  _DbgServer_get_gp_reg_args__isset() : index(false) {}
  bool index :1;
} _DbgServer_get_gp_reg_args__isset;

class DbgServer_get_gp_reg_args {
 public:

  DbgServer_get_gp_reg_args(const DbgServer_get_gp_reg_args&);
  DbgServer_get_gp_reg_args& operator=(const DbgServer_get_gp_reg_args&);
  DbgServer_get_gp_reg_args() : index((GpRegsEnum::type)0) {
  }

  virtual ~DbgServer_get_gp_reg_args() noexcept;
  /**
   * 
   * @see GpRegsEnum
   */
  GpRegsEnum::type index;

  _DbgServer_get_gp_reg_args__isset __isset;

  void __set_index(const GpRegsEnum::type val);

  bool operator == (const DbgServer_get_gp_reg_args & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const DbgServer_get_gp_reg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_gp_reg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_get_gp_reg_pargs {
 public:


  virtual ~DbgServer_get_gp_reg_pargs() noexcept;
  /**
   * 
   * @see GpRegsEnum
   */
  const GpRegsEnum::type* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_gp_reg_result__isset {
  _DbgServer_get_gp_reg_result__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_gp_reg_result__isset;

class DbgServer_get_gp_reg_result {
 public:

  DbgServer_get_gp_reg_result(const DbgServer_get_gp_reg_result&);
  DbgServer_get_gp_reg_result& operator=(const DbgServer_get_gp_reg_result&);
  DbgServer_get_gp_reg_result() : success(0) {
  }

  virtual ~DbgServer_get_gp_reg_result() noexcept;
  int32_t success;

  _DbgServer_get_gp_reg_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DbgServer_get_gp_reg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DbgServer_get_gp_reg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_gp_reg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_gp_reg_presult__isset {
  _DbgServer_get_gp_reg_presult__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_gp_reg_presult__isset;

class DbgServer_get_gp_reg_presult {
 public:


  virtual ~DbgServer_get_gp_reg_presult() noexcept;
  int32_t* success;

  _DbgServer_get_gp_reg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_get_gp_regs_args {
 public:

  DbgServer_get_gp_regs_args(const DbgServer_get_gp_regs_args&);
  DbgServer_get_gp_regs_args& operator=(const DbgServer_get_gp_regs_args&);
  DbgServer_get_gp_regs_args() {
  }

  virtual ~DbgServer_get_gp_regs_args() noexcept;

  bool operator == (const DbgServer_get_gp_regs_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_get_gp_regs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_gp_regs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_get_gp_regs_pargs {
 public:


  virtual ~DbgServer_get_gp_regs_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_gp_regs_result__isset {
  _DbgServer_get_gp_regs_result__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_gp_regs_result__isset;

class DbgServer_get_gp_regs_result {
 public:

  DbgServer_get_gp_regs_result(const DbgServer_get_gp_regs_result&);
  DbgServer_get_gp_regs_result& operator=(const DbgServer_get_gp_regs_result&);
  DbgServer_get_gp_regs_result() {
  }

  virtual ~DbgServer_get_gp_regs_result() noexcept;
  GpRegisters success;

  _DbgServer_get_gp_regs_result__isset __isset;

  void __set_success(const GpRegisters& val);

  bool operator == (const DbgServer_get_gp_regs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DbgServer_get_gp_regs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_gp_regs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_gp_regs_presult__isset {
  _DbgServer_get_gp_regs_presult__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_gp_regs_presult__isset;

class DbgServer_get_gp_regs_presult {
 public:


  virtual ~DbgServer_get_gp_regs_presult() noexcept;
  GpRegisters* success;

  _DbgServer_get_gp_regs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_set_gp_reg_args__isset {
  _DbgServer_set_gp_reg_args__isset() : reg(false) {}
  bool reg :1;
} _DbgServer_set_gp_reg_args__isset;

class DbgServer_set_gp_reg_args {
 public:

  DbgServer_set_gp_reg_args(const DbgServer_set_gp_reg_args&);
  DbgServer_set_gp_reg_args& operator=(const DbgServer_set_gp_reg_args&);
  DbgServer_set_gp_reg_args() {
  }

  virtual ~DbgServer_set_gp_reg_args() noexcept;
  GpRegister reg;

  _DbgServer_set_gp_reg_args__isset __isset;

  void __set_reg(const GpRegister& val);

  bool operator == (const DbgServer_set_gp_reg_args & rhs) const
  {
    if (!(reg == rhs.reg))
      return false;
    return true;
  }
  bool operator != (const DbgServer_set_gp_reg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_set_gp_reg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_set_gp_reg_pargs {
 public:


  virtual ~DbgServer_set_gp_reg_pargs() noexcept;
  const GpRegister* reg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_set_gp_reg_result {
 public:

  DbgServer_set_gp_reg_result(const DbgServer_set_gp_reg_result&);
  DbgServer_set_gp_reg_result& operator=(const DbgServer_set_gp_reg_result&);
  DbgServer_set_gp_reg_result() {
  }

  virtual ~DbgServer_set_gp_reg_result() noexcept;

  bool operator == (const DbgServer_set_gp_reg_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_set_gp_reg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_set_gp_reg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_set_gp_reg_presult {
 public:


  virtual ~DbgServer_set_gp_reg_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_read_memory_args__isset {
  _DbgServer_read_memory_args__isset() : address(false), size(false) {}
  bool address :1;
  bool size :1;
} _DbgServer_read_memory_args__isset;

class DbgServer_read_memory_args {
 public:

  DbgServer_read_memory_args(const DbgServer_read_memory_args&);
  DbgServer_read_memory_args& operator=(const DbgServer_read_memory_args&);
  DbgServer_read_memory_args() : address(0), size(0) {
  }

  virtual ~DbgServer_read_memory_args() noexcept;
  int32_t address;
  int32_t size;

  _DbgServer_read_memory_args__isset __isset;

  void __set_address(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const DbgServer_read_memory_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DbgServer_read_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_read_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_read_memory_pargs {
 public:


  virtual ~DbgServer_read_memory_pargs() noexcept;
  const int32_t* address;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_read_memory_result__isset {
  _DbgServer_read_memory_result__isset() : success(false) {}
  bool success :1;
} _DbgServer_read_memory_result__isset;

class DbgServer_read_memory_result {
 public:

  DbgServer_read_memory_result(const DbgServer_read_memory_result&);
  DbgServer_read_memory_result& operator=(const DbgServer_read_memory_result&);
  DbgServer_read_memory_result() : success() {
  }

  virtual ~DbgServer_read_memory_result() noexcept;
  std::string success;

  _DbgServer_read_memory_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DbgServer_read_memory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DbgServer_read_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_read_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_read_memory_presult__isset {
  _DbgServer_read_memory_presult__isset() : success(false) {}
  bool success :1;
} _DbgServer_read_memory_presult__isset;

class DbgServer_read_memory_presult {
 public:


  virtual ~DbgServer_read_memory_presult() noexcept;
  std::string* success;

  _DbgServer_read_memory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_write_memory_args__isset {
  _DbgServer_write_memory_args__isset() : address(false), data(false) {}
  bool address :1;
  bool data :1;
} _DbgServer_write_memory_args__isset;

class DbgServer_write_memory_args {
 public:

  DbgServer_write_memory_args(const DbgServer_write_memory_args&);
  DbgServer_write_memory_args& operator=(const DbgServer_write_memory_args&);
  DbgServer_write_memory_args() : address(0), data() {
  }

  virtual ~DbgServer_write_memory_args() noexcept;
  int32_t address;
  std::string data;

  _DbgServer_write_memory_args__isset __isset;

  void __set_address(const int32_t val);

  void __set_data(const std::string& val);

  bool operator == (const DbgServer_write_memory_args & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DbgServer_write_memory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_write_memory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_write_memory_pargs {
 public:


  virtual ~DbgServer_write_memory_pargs() noexcept;
  const int32_t* address;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_write_memory_result {
 public:

  DbgServer_write_memory_result(const DbgServer_write_memory_result&);
  DbgServer_write_memory_result& operator=(const DbgServer_write_memory_result&);
  DbgServer_write_memory_result() {
  }

  virtual ~DbgServer_write_memory_result() noexcept;

  bool operator == (const DbgServer_write_memory_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_write_memory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_write_memory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_write_memory_presult {
 public:


  virtual ~DbgServer_write_memory_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_get_breakpoints_args {
 public:

  DbgServer_get_breakpoints_args(const DbgServer_get_breakpoints_args&);
  DbgServer_get_breakpoints_args& operator=(const DbgServer_get_breakpoints_args&);
  DbgServer_get_breakpoints_args() {
  }

  virtual ~DbgServer_get_breakpoints_args() noexcept;

  bool operator == (const DbgServer_get_breakpoints_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_get_breakpoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_breakpoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_get_breakpoints_pargs {
 public:


  virtual ~DbgServer_get_breakpoints_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_breakpoints_result__isset {
  _DbgServer_get_breakpoints_result__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_breakpoints_result__isset;

class DbgServer_get_breakpoints_result {
 public:

  DbgServer_get_breakpoints_result(const DbgServer_get_breakpoints_result&);
  DbgServer_get_breakpoints_result& operator=(const DbgServer_get_breakpoints_result&);
  DbgServer_get_breakpoints_result() {
  }

  virtual ~DbgServer_get_breakpoints_result() noexcept;
  std::vector<DbgBreakpoint>  success;

  _DbgServer_get_breakpoints_result__isset __isset;

  void __set_success(const std::vector<DbgBreakpoint> & val);

  bool operator == (const DbgServer_get_breakpoints_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DbgServer_get_breakpoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_breakpoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_breakpoints_presult__isset {
  _DbgServer_get_breakpoints_presult__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_breakpoints_presult__isset;

class DbgServer_get_breakpoints_presult {
 public:


  virtual ~DbgServer_get_breakpoints_presult() noexcept;
  std::vector<DbgBreakpoint> * success;

  _DbgServer_get_breakpoints_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_add_breakpoint_args__isset {
  _DbgServer_add_breakpoint_args__isset() : bpt(false) {}
  bool bpt :1;
} _DbgServer_add_breakpoint_args__isset;

class DbgServer_add_breakpoint_args {
 public:

  DbgServer_add_breakpoint_args(const DbgServer_add_breakpoint_args&);
  DbgServer_add_breakpoint_args& operator=(const DbgServer_add_breakpoint_args&);
  DbgServer_add_breakpoint_args() {
  }

  virtual ~DbgServer_add_breakpoint_args() noexcept;
  DbgBreakpoint bpt;

  _DbgServer_add_breakpoint_args__isset __isset;

  void __set_bpt(const DbgBreakpoint& val);

  bool operator == (const DbgServer_add_breakpoint_args & rhs) const
  {
    if (!(bpt == rhs.bpt))
      return false;
    return true;
  }
  bool operator != (const DbgServer_add_breakpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_add_breakpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_add_breakpoint_pargs {
 public:


  virtual ~DbgServer_add_breakpoint_pargs() noexcept;
  const DbgBreakpoint* bpt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_add_breakpoint_result {
 public:

  DbgServer_add_breakpoint_result(const DbgServer_add_breakpoint_result&);
  DbgServer_add_breakpoint_result& operator=(const DbgServer_add_breakpoint_result&);
  DbgServer_add_breakpoint_result() {
  }

  virtual ~DbgServer_add_breakpoint_result() noexcept;

  bool operator == (const DbgServer_add_breakpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_add_breakpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_add_breakpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_add_breakpoint_presult {
 public:


  virtual ~DbgServer_add_breakpoint_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_toggle_breakpoint_args__isset {
  _DbgServer_toggle_breakpoint_args__isset() : bpt(false) {}
  bool bpt :1;
} _DbgServer_toggle_breakpoint_args__isset;

class DbgServer_toggle_breakpoint_args {
 public:

  DbgServer_toggle_breakpoint_args(const DbgServer_toggle_breakpoint_args&);
  DbgServer_toggle_breakpoint_args& operator=(const DbgServer_toggle_breakpoint_args&);
  DbgServer_toggle_breakpoint_args() {
  }

  virtual ~DbgServer_toggle_breakpoint_args() noexcept;
  DbgBreakpoint bpt;

  _DbgServer_toggle_breakpoint_args__isset __isset;

  void __set_bpt(const DbgBreakpoint& val);

  bool operator == (const DbgServer_toggle_breakpoint_args & rhs) const
  {
    if (!(bpt == rhs.bpt))
      return false;
    return true;
  }
  bool operator != (const DbgServer_toggle_breakpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_toggle_breakpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_toggle_breakpoint_pargs {
 public:


  virtual ~DbgServer_toggle_breakpoint_pargs() noexcept;
  const DbgBreakpoint* bpt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_toggle_breakpoint_result {
 public:

  DbgServer_toggle_breakpoint_result(const DbgServer_toggle_breakpoint_result&);
  DbgServer_toggle_breakpoint_result& operator=(const DbgServer_toggle_breakpoint_result&);
  DbgServer_toggle_breakpoint_result() {
  }

  virtual ~DbgServer_toggle_breakpoint_result() noexcept;

  bool operator == (const DbgServer_toggle_breakpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_toggle_breakpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_toggle_breakpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_toggle_breakpoint_presult {
 public:


  virtual ~DbgServer_toggle_breakpoint_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_update_breakpoint_args__isset {
  _DbgServer_update_breakpoint_args__isset() : bpt(false) {}
  bool bpt :1;
} _DbgServer_update_breakpoint_args__isset;

class DbgServer_update_breakpoint_args {
 public:

  DbgServer_update_breakpoint_args(const DbgServer_update_breakpoint_args&);
  DbgServer_update_breakpoint_args& operator=(const DbgServer_update_breakpoint_args&);
  DbgServer_update_breakpoint_args() {
  }

  virtual ~DbgServer_update_breakpoint_args() noexcept;
  DbgBreakpoint bpt;

  _DbgServer_update_breakpoint_args__isset __isset;

  void __set_bpt(const DbgBreakpoint& val);

  bool operator == (const DbgServer_update_breakpoint_args & rhs) const
  {
    if (!(bpt == rhs.bpt))
      return false;
    return true;
  }
  bool operator != (const DbgServer_update_breakpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_update_breakpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_update_breakpoint_pargs {
 public:


  virtual ~DbgServer_update_breakpoint_pargs() noexcept;
  const DbgBreakpoint* bpt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_update_breakpoint_result {
 public:

  DbgServer_update_breakpoint_result(const DbgServer_update_breakpoint_result&);
  DbgServer_update_breakpoint_result& operator=(const DbgServer_update_breakpoint_result&);
  DbgServer_update_breakpoint_result() {
  }

  virtual ~DbgServer_update_breakpoint_result() noexcept;

  bool operator == (const DbgServer_update_breakpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_update_breakpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_update_breakpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_update_breakpoint_presult {
 public:


  virtual ~DbgServer_update_breakpoint_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DbgServer_del_breakpoint_args__isset {
  _DbgServer_del_breakpoint_args__isset() : bpt(false) {}
  bool bpt :1;
} _DbgServer_del_breakpoint_args__isset;

class DbgServer_del_breakpoint_args {
 public:

  DbgServer_del_breakpoint_args(const DbgServer_del_breakpoint_args&);
  DbgServer_del_breakpoint_args& operator=(const DbgServer_del_breakpoint_args&);
  DbgServer_del_breakpoint_args() {
  }

  virtual ~DbgServer_del_breakpoint_args() noexcept;
  DbgBreakpoint bpt;

  _DbgServer_del_breakpoint_args__isset __isset;

  void __set_bpt(const DbgBreakpoint& val);

  bool operator == (const DbgServer_del_breakpoint_args & rhs) const
  {
    if (!(bpt == rhs.bpt))
      return false;
    return true;
  }
  bool operator != (const DbgServer_del_breakpoint_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_del_breakpoint_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_del_breakpoint_pargs {
 public:


  virtual ~DbgServer_del_breakpoint_pargs() noexcept;
  const DbgBreakpoint* bpt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_del_breakpoint_result {
 public:

  DbgServer_del_breakpoint_result(const DbgServer_del_breakpoint_result&);
  DbgServer_del_breakpoint_result& operator=(const DbgServer_del_breakpoint_result&);
  DbgServer_del_breakpoint_result() {
  }

  virtual ~DbgServer_del_breakpoint_result() noexcept;

  bool operator == (const DbgServer_del_breakpoint_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_del_breakpoint_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_del_breakpoint_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_del_breakpoint_presult {
 public:


  virtual ~DbgServer_del_breakpoint_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_clear_breakpoints_args {
 public:

  DbgServer_clear_breakpoints_args(const DbgServer_clear_breakpoints_args&);
  DbgServer_clear_breakpoints_args& operator=(const DbgServer_clear_breakpoints_args&);
  DbgServer_clear_breakpoints_args() {
  }

  virtual ~DbgServer_clear_breakpoints_args() noexcept;

  bool operator == (const DbgServer_clear_breakpoints_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_clear_breakpoints_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_clear_breakpoints_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_clear_breakpoints_pargs {
 public:


  virtual ~DbgServer_clear_breakpoints_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_clear_breakpoints_result {
 public:

  DbgServer_clear_breakpoints_result(const DbgServer_clear_breakpoints_result&);
  DbgServer_clear_breakpoints_result& operator=(const DbgServer_clear_breakpoints_result&);
  DbgServer_clear_breakpoints_result() {
  }

  virtual ~DbgServer_clear_breakpoints_result() noexcept;

  bool operator == (const DbgServer_clear_breakpoints_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_clear_breakpoints_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_clear_breakpoints_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_clear_breakpoints_presult {
 public:


  virtual ~DbgServer_clear_breakpoints_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_pause_args {
 public:

  DbgServer_pause_args(const DbgServer_pause_args&);
  DbgServer_pause_args& operator=(const DbgServer_pause_args&);
  DbgServer_pause_args() {
  }

  virtual ~DbgServer_pause_args() noexcept;

  bool operator == (const DbgServer_pause_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_pause_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_pause_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_pause_pargs {
 public:


  virtual ~DbgServer_pause_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_pause_result {
 public:

  DbgServer_pause_result(const DbgServer_pause_result&);
  DbgServer_pause_result& operator=(const DbgServer_pause_result&);
  DbgServer_pause_result() {
  }

  virtual ~DbgServer_pause_result() noexcept;

  bool operator == (const DbgServer_pause_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_pause_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_pause_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_pause_presult {
 public:


  virtual ~DbgServer_pause_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_resume_args {
 public:

  DbgServer_resume_args(const DbgServer_resume_args&);
  DbgServer_resume_args& operator=(const DbgServer_resume_args&);
  DbgServer_resume_args() {
  }

  virtual ~DbgServer_resume_args() noexcept;

  bool operator == (const DbgServer_resume_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_resume_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_resume_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_resume_pargs {
 public:


  virtual ~DbgServer_resume_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_resume_result {
 public:

  DbgServer_resume_result(const DbgServer_resume_result&);
  DbgServer_resume_result& operator=(const DbgServer_resume_result&);
  DbgServer_resume_result() {
  }

  virtual ~DbgServer_resume_result() noexcept;

  bool operator == (const DbgServer_resume_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_resume_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_resume_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_resume_presult {
 public:


  virtual ~DbgServer_resume_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_start_emulation_args {
 public:

  DbgServer_start_emulation_args(const DbgServer_start_emulation_args&);
  DbgServer_start_emulation_args& operator=(const DbgServer_start_emulation_args&);
  DbgServer_start_emulation_args() {
  }

  virtual ~DbgServer_start_emulation_args() noexcept;

  bool operator == (const DbgServer_start_emulation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_start_emulation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_start_emulation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_start_emulation_pargs {
 public:


  virtual ~DbgServer_start_emulation_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_start_emulation_result {
 public:

  DbgServer_start_emulation_result(const DbgServer_start_emulation_result&);
  DbgServer_start_emulation_result& operator=(const DbgServer_start_emulation_result&);
  DbgServer_start_emulation_result() {
  }

  virtual ~DbgServer_start_emulation_result() noexcept;

  bool operator == (const DbgServer_start_emulation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_start_emulation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_start_emulation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_start_emulation_presult {
 public:


  virtual ~DbgServer_start_emulation_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_exit_emulation_args {
 public:

  DbgServer_exit_emulation_args(const DbgServer_exit_emulation_args&);
  DbgServer_exit_emulation_args& operator=(const DbgServer_exit_emulation_args&);
  DbgServer_exit_emulation_args() {
  }

  virtual ~DbgServer_exit_emulation_args() noexcept;

  bool operator == (const DbgServer_exit_emulation_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_exit_emulation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_exit_emulation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_exit_emulation_pargs {
 public:


  virtual ~DbgServer_exit_emulation_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_exit_emulation_result {
 public:

  DbgServer_exit_emulation_result(const DbgServer_exit_emulation_result&);
  DbgServer_exit_emulation_result& operator=(const DbgServer_exit_emulation_result&);
  DbgServer_exit_emulation_result() {
  }

  virtual ~DbgServer_exit_emulation_result() noexcept;

  bool operator == (const DbgServer_exit_emulation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_exit_emulation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_exit_emulation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_exit_emulation_presult {
 public:


  virtual ~DbgServer_exit_emulation_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_step_into_args {
 public:

  DbgServer_step_into_args(const DbgServer_step_into_args&);
  DbgServer_step_into_args& operator=(const DbgServer_step_into_args&);
  DbgServer_step_into_args() {
  }

  virtual ~DbgServer_step_into_args() noexcept;

  bool operator == (const DbgServer_step_into_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_step_into_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_step_into_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_step_into_pargs {
 public:


  virtual ~DbgServer_step_into_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_step_into_result {
 public:

  DbgServer_step_into_result(const DbgServer_step_into_result&);
  DbgServer_step_into_result& operator=(const DbgServer_step_into_result&);
  DbgServer_step_into_result() {
  }

  virtual ~DbgServer_step_into_result() noexcept;

  bool operator == (const DbgServer_step_into_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_step_into_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_step_into_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_step_into_presult {
 public:


  virtual ~DbgServer_step_into_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_step_over_args {
 public:

  DbgServer_step_over_args(const DbgServer_step_over_args&);
  DbgServer_step_over_args& operator=(const DbgServer_step_over_args&);
  DbgServer_step_over_args() {
  }

  virtual ~DbgServer_step_over_args() noexcept;

  bool operator == (const DbgServer_step_over_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_step_over_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_step_over_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_step_over_pargs {
 public:


  virtual ~DbgServer_step_over_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_step_over_result {
 public:

  DbgServer_step_over_result(const DbgServer_step_over_result&);
  DbgServer_step_over_result& operator=(const DbgServer_step_over_result&);
  DbgServer_step_over_result() {
  }

  virtual ~DbgServer_step_over_result() noexcept;

  bool operator == (const DbgServer_step_over_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_step_over_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_step_over_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_step_over_presult {
 public:


  virtual ~DbgServer_step_over_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_get_callstack_args {
 public:

  DbgServer_get_callstack_args(const DbgServer_get_callstack_args&);
  DbgServer_get_callstack_args& operator=(const DbgServer_get_callstack_args&);
  DbgServer_get_callstack_args() {
  }

  virtual ~DbgServer_get_callstack_args() noexcept;

  bool operator == (const DbgServer_get_callstack_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_get_callstack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_callstack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_get_callstack_pargs {
 public:


  virtual ~DbgServer_get_callstack_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_callstack_result__isset {
  _DbgServer_get_callstack_result__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_callstack_result__isset;

class DbgServer_get_callstack_result {
 public:

  DbgServer_get_callstack_result(const DbgServer_get_callstack_result&);
  DbgServer_get_callstack_result& operator=(const DbgServer_get_callstack_result&);
  DbgServer_get_callstack_result() {
  }

  virtual ~DbgServer_get_callstack_result() noexcept;
  std::vector<int32_t>  success;

  _DbgServer_get_callstack_result__isset __isset;

  void __set_success(const std::vector<int32_t> & val);

  bool operator == (const DbgServer_get_callstack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DbgServer_get_callstack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_callstack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_callstack_presult__isset {
  _DbgServer_get_callstack_presult__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_callstack_presult__isset;

class DbgServer_get_callstack_presult {
 public:


  virtual ~DbgServer_get_callstack_presult() noexcept;
  std::vector<int32_t> * success;

  _DbgServer_get_callstack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DbgServer_get_sound_banks_args {
 public:

  DbgServer_get_sound_banks_args(const DbgServer_get_sound_banks_args&);
  DbgServer_get_sound_banks_args& operator=(const DbgServer_get_sound_banks_args&);
  DbgServer_get_sound_banks_args() {
  }

  virtual ~DbgServer_get_sound_banks_args() noexcept;

  bool operator == (const DbgServer_get_sound_banks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DbgServer_get_sound_banks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_sound_banks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DbgServer_get_sound_banks_pargs {
 public:


  virtual ~DbgServer_get_sound_banks_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_sound_banks_result__isset {
  _DbgServer_get_sound_banks_result__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_sound_banks_result__isset;

class DbgServer_get_sound_banks_result {
 public:

  DbgServer_get_sound_banks_result(const DbgServer_get_sound_banks_result&);
  DbgServer_get_sound_banks_result& operator=(const DbgServer_get_sound_banks_result&);
  DbgServer_get_sound_banks_result() {
  }

  virtual ~DbgServer_get_sound_banks_result() noexcept;
  std::map<int32_t, SoundBankRange>  success;

  _DbgServer_get_sound_banks_result__isset __isset;

  void __set_success(const std::map<int32_t, SoundBankRange> & val);

  bool operator == (const DbgServer_get_sound_banks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DbgServer_get_sound_banks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgServer_get_sound_banks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DbgServer_get_sound_banks_presult__isset {
  _DbgServer_get_sound_banks_presult__isset() : success(false) {}
  bool success :1;
} _DbgServer_get_sound_banks_presult__isset;

class DbgServer_get_sound_banks_presult {
 public:


  virtual ~DbgServer_get_sound_banks_presult() noexcept;
  std::map<int32_t, SoundBankRange> * success;

  _DbgServer_get_sound_banks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DbgServerClient : virtual public DbgServerIf {
 public:
  DbgServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DbgServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t get_gp_reg(const GpRegsEnum::type index);
  void send_get_gp_reg(const GpRegsEnum::type index);
  int32_t recv_get_gp_reg();
  void get_gp_regs(GpRegisters& _return);
  void send_get_gp_regs();
  void recv_get_gp_regs(GpRegisters& _return);
  void set_gp_reg(const GpRegister& reg);
  void send_set_gp_reg(const GpRegister& reg);
  void recv_set_gp_reg();
  void read_memory(std::string& _return, const int32_t address, const int32_t size);
  void send_read_memory(const int32_t address, const int32_t size);
  void recv_read_memory(std::string& _return);
  void write_memory(const int32_t address, const std::string& data);
  void send_write_memory(const int32_t address, const std::string& data);
  void recv_write_memory();
  void get_breakpoints(std::vector<DbgBreakpoint> & _return);
  void send_get_breakpoints();
  void recv_get_breakpoints(std::vector<DbgBreakpoint> & _return);
  void add_breakpoint(const DbgBreakpoint& bpt);
  void send_add_breakpoint(const DbgBreakpoint& bpt);
  void recv_add_breakpoint();
  void toggle_breakpoint(const DbgBreakpoint& bpt);
  void send_toggle_breakpoint(const DbgBreakpoint& bpt);
  void recv_toggle_breakpoint();
  void update_breakpoint(const DbgBreakpoint& bpt);
  void send_update_breakpoint(const DbgBreakpoint& bpt);
  void recv_update_breakpoint();
  void del_breakpoint(const DbgBreakpoint& bpt);
  void send_del_breakpoint(const DbgBreakpoint& bpt);
  void recv_del_breakpoint();
  void clear_breakpoints();
  void send_clear_breakpoints();
  void recv_clear_breakpoints();
  void pause();
  void send_pause();
  void recv_pause();
  void resume();
  void send_resume();
  void recv_resume();
  void start_emulation();
  void send_start_emulation();
  void recv_start_emulation();
  void exit_emulation();
  void send_exit_emulation();
  void recv_exit_emulation();
  void step_into();
  void send_step_into();
  void recv_step_into();
  void step_over();
  void send_step_over();
  void recv_step_over();
  void get_callstack(std::vector<int32_t> & _return);
  void send_get_callstack();
  void recv_get_callstack(std::vector<int32_t> & _return);
  void get_sound_banks(std::map<int32_t, SoundBankRange> & _return);
  void send_get_sound_banks();
  void recv_get_sound_banks(std::map<int32_t, SoundBankRange> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DbgServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DbgServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DbgServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_gp_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_gp_regs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_gp_reg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_write_memory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_breakpoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_breakpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_toggle_breakpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_breakpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_breakpoint(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_breakpoints(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pause(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resume(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start_emulation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exit_emulation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_step_into(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_step_over(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_callstack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_sound_banks(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DbgServerProcessor(::std::shared_ptr<DbgServerIf> iface) :
    iface_(iface) {
    processMap_["get_gp_reg"] = &DbgServerProcessor::process_get_gp_reg;
    processMap_["get_gp_regs"] = &DbgServerProcessor::process_get_gp_regs;
    processMap_["set_gp_reg"] = &DbgServerProcessor::process_set_gp_reg;
    processMap_["read_memory"] = &DbgServerProcessor::process_read_memory;
    processMap_["write_memory"] = &DbgServerProcessor::process_write_memory;
    processMap_["get_breakpoints"] = &DbgServerProcessor::process_get_breakpoints;
    processMap_["add_breakpoint"] = &DbgServerProcessor::process_add_breakpoint;
    processMap_["toggle_breakpoint"] = &DbgServerProcessor::process_toggle_breakpoint;
    processMap_["update_breakpoint"] = &DbgServerProcessor::process_update_breakpoint;
    processMap_["del_breakpoint"] = &DbgServerProcessor::process_del_breakpoint;
    processMap_["clear_breakpoints"] = &DbgServerProcessor::process_clear_breakpoints;
    processMap_["pause"] = &DbgServerProcessor::process_pause;
    processMap_["resume"] = &DbgServerProcessor::process_resume;
    processMap_["start_emulation"] = &DbgServerProcessor::process_start_emulation;
    processMap_["exit_emulation"] = &DbgServerProcessor::process_exit_emulation;
    processMap_["step_into"] = &DbgServerProcessor::process_step_into;
    processMap_["step_over"] = &DbgServerProcessor::process_step_over;
    processMap_["get_callstack"] = &DbgServerProcessor::process_get_callstack;
    processMap_["get_sound_banks"] = &DbgServerProcessor::process_get_sound_banks;
  }

  virtual ~DbgServerProcessor() {}
};

class DbgServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DbgServerProcessorFactory(const ::std::shared_ptr< DbgServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< DbgServerIfFactory > handlerFactory_;
};

class DbgServerMultiface : virtual public DbgServerIf {
 public:
  DbgServerMultiface(std::vector<std::shared_ptr<DbgServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DbgServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<DbgServerIf> > ifaces_;
  DbgServerMultiface() {}
  void add(::std::shared_ptr<DbgServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t get_gp_reg(const GpRegsEnum::type index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gp_reg(index);
    }
    return ifaces_[i]->get_gp_reg(index);
  }

  void get_gp_regs(GpRegisters& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_gp_regs(_return);
    }
    ifaces_[i]->get_gp_regs(_return);
    return;
  }

  void set_gp_reg(const GpRegister& reg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_gp_reg(reg);
    }
    ifaces_[i]->set_gp_reg(reg);
  }

  void read_memory(std::string& _return, const int32_t address, const int32_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_memory(_return, address, size);
    }
    ifaces_[i]->read_memory(_return, address, size);
    return;
  }

  void write_memory(const int32_t address, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->write_memory(address, data);
    }
    ifaces_[i]->write_memory(address, data);
  }

  void get_breakpoints(std::vector<DbgBreakpoint> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_breakpoints(_return);
    }
    ifaces_[i]->get_breakpoints(_return);
    return;
  }

  void add_breakpoint(const DbgBreakpoint& bpt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_breakpoint(bpt);
    }
    ifaces_[i]->add_breakpoint(bpt);
  }

  void toggle_breakpoint(const DbgBreakpoint& bpt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->toggle_breakpoint(bpt);
    }
    ifaces_[i]->toggle_breakpoint(bpt);
  }

  void update_breakpoint(const DbgBreakpoint& bpt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_breakpoint(bpt);
    }
    ifaces_[i]->update_breakpoint(bpt);
  }

  void del_breakpoint(const DbgBreakpoint& bpt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_breakpoint(bpt);
    }
    ifaces_[i]->del_breakpoint(bpt);
  }

  void clear_breakpoints() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_breakpoints();
    }
    ifaces_[i]->clear_breakpoints();
  }

  void pause() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pause();
    }
    ifaces_[i]->pause();
  }

  void resume() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resume();
    }
    ifaces_[i]->resume();
  }

  void start_emulation() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start_emulation();
    }
    ifaces_[i]->start_emulation();
  }

  void exit_emulation() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exit_emulation();
    }
    ifaces_[i]->exit_emulation();
  }

  void step_into() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->step_into();
    }
    ifaces_[i]->step_into();
  }

  void step_over() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->step_over();
    }
    ifaces_[i]->step_over();
  }

  void get_callstack(std::vector<int32_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_callstack(_return);
    }
    ifaces_[i]->get_callstack(_return);
    return;
  }

  void get_sound_banks(std::map<int32_t, SoundBankRange> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_sound_banks(_return);
    }
    ifaces_[i]->get_sound_banks(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DbgServerConcurrentClient : virtual public DbgServerIf {
 public:
  DbgServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DbgServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t get_gp_reg(const GpRegsEnum::type index);
  int32_t send_get_gp_reg(const GpRegsEnum::type index);
  int32_t recv_get_gp_reg(const int32_t seqid);
  void get_gp_regs(GpRegisters& _return);
  int32_t send_get_gp_regs();
  void recv_get_gp_regs(GpRegisters& _return, const int32_t seqid);
  void set_gp_reg(const GpRegister& reg);
  int32_t send_set_gp_reg(const GpRegister& reg);
  void recv_set_gp_reg(const int32_t seqid);
  void read_memory(std::string& _return, const int32_t address, const int32_t size);
  int32_t send_read_memory(const int32_t address, const int32_t size);
  void recv_read_memory(std::string& _return, const int32_t seqid);
  void write_memory(const int32_t address, const std::string& data);
  int32_t send_write_memory(const int32_t address, const std::string& data);
  void recv_write_memory(const int32_t seqid);
  void get_breakpoints(std::vector<DbgBreakpoint> & _return);
  int32_t send_get_breakpoints();
  void recv_get_breakpoints(std::vector<DbgBreakpoint> & _return, const int32_t seqid);
  void add_breakpoint(const DbgBreakpoint& bpt);
  int32_t send_add_breakpoint(const DbgBreakpoint& bpt);
  void recv_add_breakpoint(const int32_t seqid);
  void toggle_breakpoint(const DbgBreakpoint& bpt);
  int32_t send_toggle_breakpoint(const DbgBreakpoint& bpt);
  void recv_toggle_breakpoint(const int32_t seqid);
  void update_breakpoint(const DbgBreakpoint& bpt);
  int32_t send_update_breakpoint(const DbgBreakpoint& bpt);
  void recv_update_breakpoint(const int32_t seqid);
  void del_breakpoint(const DbgBreakpoint& bpt);
  int32_t send_del_breakpoint(const DbgBreakpoint& bpt);
  void recv_del_breakpoint(const int32_t seqid);
  void clear_breakpoints();
  int32_t send_clear_breakpoints();
  void recv_clear_breakpoints(const int32_t seqid);
  void pause();
  int32_t send_pause();
  void recv_pause(const int32_t seqid);
  void resume();
  int32_t send_resume();
  void recv_resume(const int32_t seqid);
  void start_emulation();
  int32_t send_start_emulation();
  void recv_start_emulation(const int32_t seqid);
  void exit_emulation();
  int32_t send_exit_emulation();
  void recv_exit_emulation(const int32_t seqid);
  void step_into();
  int32_t send_step_into();
  void recv_step_into(const int32_t seqid);
  void step_over();
  int32_t send_step_over();
  void recv_step_over(const int32_t seqid);
  void get_callstack(std::vector<int32_t> & _return);
  int32_t send_get_callstack();
  void recv_get_callstack(std::vector<int32_t> & _return, const int32_t seqid);
  void get_sound_banks(std::map<int32_t, SoundBankRange> & _return);
  int32_t send_get_sound_banks();
  void recv_get_sound_banks(std::map<int32_t, SoundBankRange> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
