/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef debug_proto_z80_TYPES_H
#define debug_proto_z80_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




struct GpRegsEnum {
  enum type {
    AF = 0,
    AF2 = 1,
    BC = 2,
    BC2 = 3,
    DE = 4,
    DE2 = 5,
    HL = 6,
    HL2 = 7,
    IX = 8,
    IY = 9,
    I = 10,
    R = 11,
    PC = 12,
    SP = 13,
    IP = 14,
    BANK = 15
  };
};

extern const std::map<int, const char*> _GpRegsEnum_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const GpRegsEnum::type& val);

std::string to_string(const GpRegsEnum::type& val);

struct BpType {
  enum type {
    BP_PC = 1,
    BP_READ = 2,
    BP_WRITE = 3
  };
};

extern const std::map<int, const char*> _BpType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const BpType::type& val);

std::string to_string(const BpType::type& val);

class GpRegister;

class GpRegisters;

class DbgBreakpoint;

typedef struct _GpRegister__isset {
  _GpRegister__isset() : index(false), value(false) {}
  bool index :1;
  bool value :1;
} _GpRegister__isset;

class GpRegister : public virtual ::apache::thrift::TBase {
 public:

  GpRegister(const GpRegister&);
  GpRegister& operator=(const GpRegister&);
  GpRegister() : index((GpRegsEnum::type)0), value(0) {
  }

  virtual ~GpRegister() noexcept;
  /**
   * 
   * @see GpRegsEnum
   */
  GpRegsEnum::type index;
  int32_t value;

  _GpRegister__isset __isset;

  void __set_index(const GpRegsEnum::type val);

  void __set_value(const int32_t val);

  bool operator == (const GpRegister & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const GpRegister &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpRegister & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GpRegister &a, GpRegister &b);

std::ostream& operator<<(std::ostream& out, const GpRegister& obj);

typedef struct _GpRegisters__isset {
  _GpRegisters__isset() : AF(false), AF2(false), BC(false), BC2(false), DE(false), DE2(false), HL(false), HL2(false), IX(false), IY(false), I(false), R(false), SP(false), PC(false), IP(false), BANK(false) {}
  bool AF :1;
  bool AF2 :1;
  bool BC :1;
  bool BC2 :1;
  bool DE :1;
  bool DE2 :1;
  bool HL :1;
  bool HL2 :1;
  bool IX :1;
  bool IY :1;
  bool I :1;
  bool R :1;
  bool SP :1;
  bool PC :1;
  bool IP :1;
  bool BANK :1;
} _GpRegisters__isset;

class GpRegisters : public virtual ::apache::thrift::TBase {
 public:

  GpRegisters(const GpRegisters&);
  GpRegisters& operator=(const GpRegisters&);
  GpRegisters() : AF(0), AF2(0), BC(0), BC2(0), DE(0), DE2(0), HL(0), HL2(0), IX(0), IY(0), I(0), R(0), SP(0), PC(0), IP(0), BANK(0) {
  }

  virtual ~GpRegisters() noexcept;
  int32_t AF;
  int32_t AF2;
  int32_t BC;
  int32_t BC2;
  int32_t DE;
  int32_t DE2;
  int32_t HL;
  int32_t HL2;
  int32_t IX;
  int32_t IY;
  int32_t I;
  int32_t R;
  int32_t SP;
  int32_t PC;
  int32_t IP;
  int32_t BANK;

  _GpRegisters__isset __isset;

  void __set_AF(const int32_t val);

  void __set_AF2(const int32_t val);

  void __set_BC(const int32_t val);

  void __set_BC2(const int32_t val);

  void __set_DE(const int32_t val);

  void __set_DE2(const int32_t val);

  void __set_HL(const int32_t val);

  void __set_HL2(const int32_t val);

  void __set_IX(const int32_t val);

  void __set_IY(const int32_t val);

  void __set_I(const int32_t val);

  void __set_R(const int32_t val);

  void __set_SP(const int32_t val);

  void __set_PC(const int32_t val);

  void __set_IP(const int32_t val);

  void __set_BANK(const int32_t val);

  bool operator == (const GpRegisters & rhs) const
  {
    if (!(AF == rhs.AF))
      return false;
    if (!(AF2 == rhs.AF2))
      return false;
    if (!(BC == rhs.BC))
      return false;
    if (!(BC2 == rhs.BC2))
      return false;
    if (!(DE == rhs.DE))
      return false;
    if (!(DE2 == rhs.DE2))
      return false;
    if (!(HL == rhs.HL))
      return false;
    if (!(HL2 == rhs.HL2))
      return false;
    if (!(IX == rhs.IX))
      return false;
    if (!(IY == rhs.IY))
      return false;
    if (!(I == rhs.I))
      return false;
    if (!(R == rhs.R))
      return false;
    if (!(SP == rhs.SP))
      return false;
    if (!(PC == rhs.PC))
      return false;
    if (!(IP == rhs.IP))
      return false;
    if (!(BANK == rhs.BANK))
      return false;
    return true;
  }
  bool operator != (const GpRegisters &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GpRegisters & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GpRegisters &a, GpRegisters &b);

std::ostream& operator<<(std::ostream& out, const GpRegisters& obj);

typedef struct _DbgBreakpoint__isset {
  _DbgBreakpoint__isset() : type(false), bstart(false), bend(false), enabled(false), is_forbid(false) {}
  bool type :1;
  bool bstart :1;
  bool bend :1;
  bool enabled :1;
  bool is_forbid :1;
} _DbgBreakpoint__isset;

class DbgBreakpoint : public virtual ::apache::thrift::TBase {
 public:

  DbgBreakpoint(const DbgBreakpoint&);
  DbgBreakpoint& operator=(const DbgBreakpoint&);
  DbgBreakpoint() : type((BpType::type)0), bstart(0), bend(0), enabled(0), is_forbid(0) {
  }

  virtual ~DbgBreakpoint() noexcept;
  /**
   * 
   * @see BpType
   */
  BpType::type type;
  int32_t bstart;
  int32_t bend;
  bool enabled;
  bool is_forbid;

  _DbgBreakpoint__isset __isset;

  void __set_type(const BpType::type val);

  void __set_bstart(const int32_t val);

  void __set_bend(const int32_t val);

  void __set_enabled(const bool val);

  void __set_is_forbid(const bool val);

  bool operator == (const DbgBreakpoint & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(bstart == rhs.bstart))
      return false;
    if (!(bend == rhs.bend))
      return false;
    if (!(enabled == rhs.enabled))
      return false;
    if (!(is_forbid == rhs.is_forbid))
      return false;
    return true;
  }
  bool operator != (const DbgBreakpoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbgBreakpoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DbgBreakpoint &a, DbgBreakpoint &b);

std::ostream& operator<<(std::ostream& out, const DbgBreakpoint& obj);



#endif
