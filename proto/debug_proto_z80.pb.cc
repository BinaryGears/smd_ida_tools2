// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_z80.proto

#include "debug_proto_z80.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace idadebug {
constexpr GpReg::GpReg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reg_(0)
{}
struct GpRegDefaultTypeInternal {
  constexpr GpRegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpRegDefaultTypeInternal() {}
  union {
    GpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpRegDefaultTypeInternal _GpReg_default_instance_;
constexpr GpRegs::GpRegs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : a_(0u)
  , af_(0u)
  , af2_(0u)
  , b_(0u)
  , c_(0u)
  , bc_(0u)
  , bc2_(0u)
  , de_(0u)
  , de2_(0u)
  , hl_(0u)
  , hl2_(0u)
  , ixh_(0u)
  , ixl_(0u)
  , ix_(0u)
  , iyh_(0u)
  , iyl_(0u)
  , iy_(0u)
  , i_(0u)
  , r_(0u)
  , pc_(0u)
  , sp_(0u)
  , ip_(0u)
  , bank_(0u){}
struct GpRegsDefaultTypeInternal {
  constexpr GpRegsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpRegsDefaultTypeInternal() {}
  union {
    GpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpRegsDefaultTypeInternal _GpRegs_default_instance_;
constexpr GpRegValue::GpRegValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)

  , value_(0u){}
struct GpRegValueDefaultTypeInternal {
  constexpr GpRegValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpRegValueDefaultTypeInternal() {}
  union {
    GpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;
constexpr MemoryAS::MemoryAS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(0u)
  , size_(0u){}
struct MemoryASDefaultTypeInternal {
  constexpr MemoryASDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryASDefaultTypeInternal() {}
  union {
    MemoryAS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryASDefaultTypeInternal _MemoryAS_default_instance_;
constexpr MemoryAD::MemoryAD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(0u){}
struct MemoryADDefaultTypeInternal {
  constexpr MemoryADDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryADDefaultTypeInternal() {}
  union {
    MemoryAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryADDefaultTypeInternal _MemoryAD_default_instance_;
constexpr DbgBreakpoint::DbgBreakpoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , bstart_(0u)
  , bend_(0u)
  , enabled_(false)
  , is_forbid_(false){}
struct DbgBreakpointDefaultTypeInternal {
  constexpr DbgBreakpointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbgBreakpointDefaultTypeInternal() {}
  union {
    DbgBreakpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;
constexpr DbgBreakpoints::DbgBreakpoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct DbgBreakpointsDefaultTypeInternal {
  constexpr DbgBreakpointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbgBreakpointsDefaultTypeInternal() {}
  union {
    DbgBreakpoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;
constexpr Callstack::Callstack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callstack_()
  , _callstack_cached_byte_size_(){}
struct CallstackDefaultTypeInternal {
  constexpr CallstackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallstackDefaultTypeInternal() {}
  union {
    Callstack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallstackDefaultTypeInternal _Callstack_default_instance_;
constexpr AnyRegValue::AnyRegValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct AnyRegValueDefaultTypeInternal {
  constexpr AnyRegValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyRegValueDefaultTypeInternal() {}
  union {
    AnyRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;
constexpr MemData::MemData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MemDataDefaultTypeInternal {
  constexpr MemDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemDataDefaultTypeInternal() {}
  union {
    MemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemDataDefaultTypeInternal _MemData_default_instance_;
constexpr SoundBankRange::SoundBankRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bank_min_(0u)
  , bank_max_(0u){}
struct SoundBankRangeDefaultTypeInternal {
  constexpr SoundBankRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoundBankRangeDefaultTypeInternal() {}
  union {
    SoundBankRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoundBankRangeDefaultTypeInternal _SoundBankRange_default_instance_;
constexpr SoundBankMap_RangeEntry_DoNotUse::SoundBankMap_RangeEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SoundBankMap_RangeEntry_DoNotUseDefaultTypeInternal {
  constexpr SoundBankMap_RangeEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoundBankMap_RangeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SoundBankMap_RangeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoundBankMap_RangeEntry_DoNotUseDefaultTypeInternal _SoundBankMap_RangeEntry_DoNotUse_default_instance_;
constexpr SoundBankMap::SoundBankMap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct SoundBankMapDefaultTypeInternal {
  constexpr SoundBankMapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SoundBankMapDefaultTypeInternal() {}
  union {
    SoundBankMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SoundBankMapDefaultTypeInternal _SoundBankMap_default_instance_;
constexpr PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal {
  constexpr PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PauseChanged_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal _PauseChanged_ChangedEntry_DoNotUse_default_instance_;
constexpr PauseChanged::PauseChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : changed_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , address_(0u){}
struct PauseChangedDefaultTypeInternal {
  constexpr PauseChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseChangedDefaultTypeInternal() {}
  union {
    PauseChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;
constexpr Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Changed_ChangedEntry_DoNotUseDefaultTypeInternal {
  constexpr Changed_ChangedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Changed_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Changed_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Changed_ChangedEntry_DoNotUseDefaultTypeInternal _Changed_ChangedEntry_DoNotUse_default_instance_;
constexpr Changed::Changed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : changed_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ChangedDefaultTypeInternal {
  constexpr ChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangedDefaultTypeInternal() {}
  union {
    Changed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangedDefaultTypeInternal _Changed_default_instance_;
}  // namespace idadebug
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_debug_5fproto_5fz80_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_debug_5fproto_5fz80_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_debug_5fproto_5fz80_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_debug_5fproto_5fz80_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpReg, reg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, af_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, af2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, b_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, c_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, bc_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, bc2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, de_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, de2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, hl_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, hl2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, ixh_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, ixl_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, ix_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, iyh_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, iyl_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, iy_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, i_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, r_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, pc_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, sp_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, ip_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, bank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, index_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, type_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, bstart_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, bend_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, enabled_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, is_forbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoints, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::Callstack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::Callstack, callstack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::AnyRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::AnyRegValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankRange, bank_min_),
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankRange, bank_max_),
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankMap_RangeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankMap_RangeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankMap_RangeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankMap_RangeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::SoundBankMap, range_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, changed_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed, changed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::idadebug::GpReg)},
  { 6, -1, sizeof(::idadebug::GpRegs)},
  { 34, -1, sizeof(::idadebug::GpRegValue)},
  { 41, -1, sizeof(::idadebug::MemoryAS)},
  { 48, -1, sizeof(::idadebug::MemoryAD)},
  { 55, -1, sizeof(::idadebug::DbgBreakpoint)},
  { 65, -1, sizeof(::idadebug::DbgBreakpoints)},
  { 71, -1, sizeof(::idadebug::Callstack)},
  { 77, -1, sizeof(::idadebug::AnyRegValue)},
  { 83, -1, sizeof(::idadebug::MemData)},
  { 89, -1, sizeof(::idadebug::SoundBankRange)},
  { 96, 103, sizeof(::idadebug::SoundBankMap_RangeEntry_DoNotUse)},
  { 105, -1, sizeof(::idadebug::SoundBankMap)},
  { 111, 118, sizeof(::idadebug::PauseChanged_ChangedEntry_DoNotUse)},
  { 120, -1, sizeof(::idadebug::PauseChanged)},
  { 127, 134, sizeof(::idadebug::Changed_ChangedEntry_DoNotUse)},
  { 136, -1, sizeof(::idadebug::Changed)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_GpReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_GpRegs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_GpRegValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_MemoryAS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_MemoryAD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_DbgBreakpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_DbgBreakpoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_Callstack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_AnyRegValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_MemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_SoundBankRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_SoundBankMap_RangeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_SoundBankMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_PauseChanged_ChangedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_PauseChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_Changed_ChangedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_Changed_default_instance_),
};

const char descriptor_table_protodef_debug_5fproto_5fz80_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025debug_proto_z80.proto\022\010idadebug\032\033googl"
  "e/protobuf/empty.proto\"*\n\005GpReg\022!\n\003reg\030\001"
  " \001(\0162\024.idadebug.GpRegsEnum\"\241\002\n\006GpRegs\022\t\n"
  "\001A\030\001 \001(\r\022\n\n\002AF\030\002 \001(\r\022\013\n\003AF2\030\003 \001(\r\022\t\n\001B\030\004"
  " \001(\r\022\t\n\001C\030\005 \001(\r\022\n\n\002BC\030\006 \001(\r\022\013\n\003BC2\030\007 \001(\r"
  "\022\n\n\002DE\030\010 \001(\r\022\013\n\003DE2\030\t \001(\r\022\n\n\002HL\030\n \001(\r\022\013\n"
  "\003HL2\030\013 \001(\r\022\013\n\003IXH\030\014 \001(\r\022\013\n\003IXL\030\r \001(\r\022\n\n\002"
  "IX\030\016 \001(\r\022\013\n\003IYH\030\017 \001(\r\022\013\n\003IYL\030\020 \001(\r\022\n\n\002IY"
  "\030\021 \001(\r\022\t\n\001I\030\022 \001(\r\022\t\n\001R\030\023 \001(\r\022\n\n\002PC\030\024 \001(\r"
  "\022\n\n\002SP\030\025 \001(\r\022\n\n\002IP\030\026 \001(\r\022\014\n\004BANK\030\027 \001(\r\"@"
  "\n\nGpRegValue\022#\n\005index\030\001 \001(\0162\024.idadebug.G"
  "pRegsEnum\022\r\n\005value\030\002 \001(\r\")\n\010MemoryAS\022\017\n\007"
  "address\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\")\n\010MemoryAD\022"
  "\017\n\007address\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"q\n\rDbgBre"
  "akpoint\022\036\n\004type\030\001 \001(\0162\020.idadebug.BpType\022"
  "\016\n\006bstart\030\002 \001(\r\022\014\n\004bend\030\003 \001(\r\022\017\n\007enabled"
  "\030\004 \001(\010\022\021\n\tis_forbid\030\005 \001(\010\"7\n\016DbgBreakpoi"
  "nts\022%\n\004list\030\001 \003(\0132\027.idadebug.DbgBreakpoi"
  "nt\"\036\n\tCallstack\022\021\n\tcallstack\030\001 \003(\r\"\034\n\013An"
  "yRegValue\022\r\n\005value\030\001 \001(\r\"\027\n\007MemData\022\014\n\004d"
  "ata\030\001 \001(\014\"4\n\016SoundBankRange\022\020\n\010bank_min\030"
  "\001 \001(\r\022\020\n\010bank_max\030\002 \001(\r\"\210\001\n\014SoundBankMap"
  "\0220\n\005range\030\001 \003(\0132!.idadebug.SoundBankMap."
  "RangeEntry\032F\n\nRangeEntry\022\013\n\003key\030\001 \001(\r\022\'\n"
  "\005value\030\002 \001(\0132\030.idadebug.SoundBankRange:\002"
  "8\001\"\205\001\n\014PauseChanged\022\017\n\007address\030\001 \001(\r\0224\n\007"
  "changed\030\002 \003(\0132#.idadebug.PauseChanged.Ch"
  "angedEntry\032.\n\014ChangedEntry\022\013\n\003key\030\001 \001(\r\022"
  "\r\n\005value\030\002 \001(\r:\0028\001\"j\n\007Changed\022/\n\007changed"
  "\030\001 \003(\0132\036.idadebug.Changed.ChangedEntry\032."
  "\n\014ChangedEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001"
  "(\r:\0028\001*\311\001\n\nGpRegsEnum\022\005\n\001A\020\000\022\006\n\002AF\020\001\022\007\n\003"
  "AF2\020\002\022\005\n\001B\020\003\022\005\n\001C\020\004\022\006\n\002BC\020\005\022\007\n\003BC2\020\006\022\006\n\002"
  "DE\020\007\022\007\n\003DE2\020\010\022\006\n\002HL\020\t\022\007\n\003HL2\020\n\022\007\n\003IXH\020\013\022"
  "\007\n\003IXL\020\014\022\006\n\002IX\020\r\022\007\n\003IYH\020\016\022\007\n\003IYL\020\017\022\006\n\002IY"
  "\020\020\022\005\n\001I\020\021\022\005\n\001R\020\022\022\006\n\002PC\020\023\022\006\n\002SP\020\024\022\006\n\002IP\020\025"
  "\022\010\n\004BANK\020\026*9\n\006BpType\022\t\n\005DUMMY\020\000\022\t\n\005BP_PC"
  "\020\001\022\013\n\007BP_READ\020\002\022\014\n\010BP_WRITE\020\0032\335\t\n\tDbgSer"
  "ver\0226\n\nget_gp_reg\022\017.idadebug.GpReg\032\025.ida"
  "debug.AnyRegValue\"\000\0229\n\013get_gp_regs\022\026.goo"
  "gle.protobuf.Empty\032\020.idadebug.GpRegs\"\000\022<"
  "\n\nset_gp_reg\022\024.idadebug.GpRegValue\032\026.goo"
  "gle.protobuf.Empty\"\000\0226\n\013read_memory\022\022.id"
  "adebug.MemoryAS\032\021.idadebug.MemData\"\000\022<\n\014"
  "write_memory\022\022.idadebug.MemoryAD\032\026.googl"
  "e.protobuf.Empty\"\000\022E\n\017get_breakpoints\022\026."
  "google.protobuf.Empty\032\030.idadebug.DbgBrea"
  "kpoints\"\000\022C\n\016add_breakpoint\022\027.idadebug.D"
  "bgBreakpoint\032\026.google.protobuf.Empty\"\000\022F"
  "\n\021toggle_breakpoint\022\027.idadebug.DbgBreakp"
  "oint\032\026.google.protobuf.Empty\"\000\022F\n\021update"
  "_breakpoint\022\027.idadebug.DbgBreakpoint\032\026.g"
  "oogle.protobuf.Empty\"\000\022C\n\016del_breakpoint"
  "\022\027.idadebug.DbgBreakpoint\032\026.google.proto"
  "buf.Empty\"\000\022E\n\021clear_breakpoints\022\026.googl"
  "e.protobuf.Empty\032\026.google.protobuf.Empty"
  "\"\000\0229\n\005pause\022\026.google.protobuf.Empty\032\026.go"
  "ogle.protobuf.Empty\"\000\022:\n\006resume\022\026.google"
  ".protobuf.Empty\032\026.google.protobuf.Empty\""
  "\000\022C\n\017start_emulation\022\026.google.protobuf.E"
  "mpty\032\026.google.protobuf.Empty\"\000\022B\n\016exit_e"
  "mulation\022\026.google.protobuf.Empty\032\026.googl"
  "e.protobuf.Empty\"\000\022=\n\tstep_into\022\026.google"
  ".protobuf.Empty\032\026.google.protobuf.Empty\""
  "\000\022=\n\tstep_over\022\026.google.protobuf.Empty\032\026"
  ".google.protobuf.Empty\"\000\022>\n\rget_callstac"
  "k\022\026.google.protobuf.Empty\032\023.idadebug.Cal"
  "lstack\"\000\022C\n\017get_sound_banks\022\026.google.pro"
  "tobuf.Empty\032\026.idadebug.SoundBankMap\"\0002\310\001"
  "\n\tDbgClient\022\?\n\013start_event\022\026.google.prot"
  "obuf.Empty\032\026.google.protobuf.Empty\"\000\022\?\n\013"
  "pause_event\022\026.idadebug.PauseChanged\032\026.go"
  "ogle.protobuf.Empty\"\000\0229\n\nstop_event\022\021.id"
  "adebug.Changed\032\026.google.protobuf.Empty\"\000"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_debug_5fproto_5fz80_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_debug_5fproto_5fz80_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_debug_5fproto_5fz80_2eproto = {
  false, false, 2968, descriptor_table_protodef_debug_5fproto_5fz80_2eproto, "debug_proto_z80.proto", 
  &descriptor_table_debug_5fproto_5fz80_2eproto_once, descriptor_table_debug_5fproto_5fz80_2eproto_deps, 1, 17,
  schemas, file_default_instances, TableStruct_debug_5fproto_5fz80_2eproto::offsets,
  file_level_metadata_debug_5fproto_5fz80_2eproto, file_level_enum_descriptors_debug_5fproto_5fz80_2eproto, file_level_service_descriptors_debug_5fproto_5fz80_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_debug_5fproto_5fz80_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5fz80_2eproto);
  return descriptor_table_debug_5fproto_5fz80_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_debug_5fproto_5fz80_2eproto(&descriptor_table_debug_5fproto_5fz80_2eproto);
namespace idadebug {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpRegsEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5fz80_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5fz80_2eproto[0];
}
bool GpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5fz80_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5fz80_2eproto[1];
}
bool BpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GpReg::_Internal {
 public:
};

GpReg::GpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpReg)
}
GpReg::GpReg(const GpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reg_ = from.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.GpReg)
}

void GpReg::SharedCtor() {
reg_ = 0;
}

GpReg::~GpReg() {
  // @@protoc_insertion_point(destructor:idadebug.GpReg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpReg::ArenaDtor(void* object) {
  GpReg* _this = reinterpret_cast< GpReg* >(object);
  (void)_this;
}
void GpReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::GpRegsEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpReg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpReg)
  return target;
}

size_t GpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpReg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->reg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpReg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.GpReg)
  GOOGLE_DCHECK_NE(&from, this);
  const GpReg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpReg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.GpReg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.GpReg)
    MergeFrom(*source);
  }
}

void GpReg::MergeFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpReg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg() != 0) {
    _internal_set_reg(from._internal_reg());
  }
}

void GpReg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpReg::CopyFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpReg::IsInitialized() const {
  return true;
}

void GpReg::InternalSwap(GpReg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reg_, other->reg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpReg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpRegs::_Internal {
 public:
};

GpRegs::GpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegs)
}
GpRegs::GpRegs(const GpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_) -
    reinterpret_cast<char*>(&a_)) + sizeof(bank_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegs)
}

void GpRegs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bank_) -
    reinterpret_cast<char*>(&a_)) + sizeof(bank_));
}

GpRegs::~GpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpRegs::ArenaDtor(void* object) {
  GpRegs* _this = reinterpret_cast< GpRegs* >(object);
  (void)_this;
}
void GpRegs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpRegs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_) -
      reinterpret_cast<char*>(&a_)) + sizeof(bank_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpRegs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 A = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AF = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          af_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 AF2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          af2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 B = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 C = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BC = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BC2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bc2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DE = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          de_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 DE2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          de2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HL = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          hl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 HL2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          hl2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IXH = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ixh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IXL = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ixl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IX = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ix_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IYH = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          iyh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IYL = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          iyl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IY = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          iy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 I = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 R = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PC = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SP = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 IP = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 BANK = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          bank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpRegs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 A = 1;
  if (this->a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a(), target);
  }

  // uint32 AF = 2;
  if (this->af() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_af(), target);
  }

  // uint32 AF2 = 3;
  if (this->af2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_af2(), target);
  }

  // uint32 B = 4;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_b(), target);
  }

  // uint32 C = 5;
  if (this->c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_c(), target);
  }

  // uint32 BC = 6;
  if (this->bc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bc(), target);
  }

  // uint32 BC2 = 7;
  if (this->bc2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_bc2(), target);
  }

  // uint32 DE = 8;
  if (this->de() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_de(), target);
  }

  // uint32 DE2 = 9;
  if (this->de2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_de2(), target);
  }

  // uint32 HL = 10;
  if (this->hl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_hl(), target);
  }

  // uint32 HL2 = 11;
  if (this->hl2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_hl2(), target);
  }

  // uint32 IXH = 12;
  if (this->ixh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ixh(), target);
  }

  // uint32 IXL = 13;
  if (this->ixl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ixl(), target);
  }

  // uint32 IX = 14;
  if (this->ix() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_ix(), target);
  }

  // uint32 IYH = 15;
  if (this->iyh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_iyh(), target);
  }

  // uint32 IYL = 16;
  if (this->iyl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_iyl(), target);
  }

  // uint32 IY = 17;
  if (this->iy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_iy(), target);
  }

  // uint32 I = 18;
  if (this->i() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_i(), target);
  }

  // uint32 R = 19;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_r(), target);
  }

  // uint32 PC = 20;
  if (this->pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_pc(), target);
  }

  // uint32 SP = 21;
  if (this->sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_sp(), target);
  }

  // uint32 IP = 22;
  if (this->ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_ip(), target);
  }

  // uint32 BANK = 23;
  if (this->bank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_bank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegs)
  return target;
}

size_t GpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 A = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a());
  }

  // uint32 AF = 2;
  if (this->af() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_af());
  }

  // uint32 AF2 = 3;
  if (this->af2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_af2());
  }

  // uint32 B = 4;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_b());
  }

  // uint32 C = 5;
  if (this->c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_c());
  }

  // uint32 BC = 6;
  if (this->bc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bc());
  }

  // uint32 BC2 = 7;
  if (this->bc2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bc2());
  }

  // uint32 DE = 8;
  if (this->de() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_de());
  }

  // uint32 DE2 = 9;
  if (this->de2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_de2());
  }

  // uint32 HL = 10;
  if (this->hl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hl());
  }

  // uint32 HL2 = 11;
  if (this->hl2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hl2());
  }

  // uint32 IXH = 12;
  if (this->ixh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ixh());
  }

  // uint32 IXL = 13;
  if (this->ixl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ixl());
  }

  // uint32 IX = 14;
  if (this->ix() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ix());
  }

  // uint32 IYH = 15;
  if (this->iyh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iyh());
  }

  // uint32 IYL = 16;
  if (this->iyl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iyl());
  }

  // uint32 IY = 17;
  if (this->iy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_iy());
  }

  // uint32 I = 18;
  if (this->i() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_i());
  }

  // uint32 R = 19;
  if (this->r() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_r());
  }

  // uint32 PC = 20;
  if (this->pc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pc());
  }

  // uint32 SP = 21;
  if (this->sp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sp());
  }

  // uint32 IP = 22;
  if (this->ip() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ip());
  }

  // uint32 BANK = 23;
  if (this->bank() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bank());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpRegs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.GpRegs)
  GOOGLE_DCHECK_NE(&from, this);
  const GpRegs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpRegs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.GpRegs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.GpRegs)
    MergeFrom(*source);
  }
}

void GpRegs::MergeFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a() != 0) {
    _internal_set_a(from._internal_a());
  }
  if (from.af() != 0) {
    _internal_set_af(from._internal_af());
  }
  if (from.af2() != 0) {
    _internal_set_af2(from._internal_af2());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (from.c() != 0) {
    _internal_set_c(from._internal_c());
  }
  if (from.bc() != 0) {
    _internal_set_bc(from._internal_bc());
  }
  if (from.bc2() != 0) {
    _internal_set_bc2(from._internal_bc2());
  }
  if (from.de() != 0) {
    _internal_set_de(from._internal_de());
  }
  if (from.de2() != 0) {
    _internal_set_de2(from._internal_de2());
  }
  if (from.hl() != 0) {
    _internal_set_hl(from._internal_hl());
  }
  if (from.hl2() != 0) {
    _internal_set_hl2(from._internal_hl2());
  }
  if (from.ixh() != 0) {
    _internal_set_ixh(from._internal_ixh());
  }
  if (from.ixl() != 0) {
    _internal_set_ixl(from._internal_ixl());
  }
  if (from.ix() != 0) {
    _internal_set_ix(from._internal_ix());
  }
  if (from.iyh() != 0) {
    _internal_set_iyh(from._internal_iyh());
  }
  if (from.iyl() != 0) {
    _internal_set_iyl(from._internal_iyl());
  }
  if (from.iy() != 0) {
    _internal_set_iy(from._internal_iy());
  }
  if (from.i() != 0) {
    _internal_set_i(from._internal_i());
  }
  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from.sp() != 0) {
    _internal_set_sp(from._internal_sp());
  }
  if (from.ip() != 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.bank() != 0) {
    _internal_set_bank(from._internal_bank());
  }
}

void GpRegs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpRegs::CopyFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegs::IsInitialized() const {
  return true;
}

void GpRegs::InternalSwap(GpRegs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegs, bank_)
      + sizeof(GpRegs::bank_)
      - PROTOBUF_FIELD_OFFSET(GpRegs, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpRegs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpRegValue::_Internal {
 public:
};

GpRegValue::GpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegValue)
}
GpRegValue::GpRegValue(const GpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegValue)
}

void GpRegValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
}

GpRegValue::~GpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpRegValue::ArenaDtor(void* object) {
  GpRegValue* _this = reinterpret_cast< GpRegValue* >(object);
  (void)_this;
}
void GpRegValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpRegValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpRegValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::GpRegsEnum>(val));
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpRegValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegValue)
  return target;
}

size_t GpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpRegValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.GpRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  const GpRegValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpRegValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.GpRegValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.GpRegValue)
    MergeFrom(*source);
  }
}

void GpRegValue::MergeFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void GpRegValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpRegValue::CopyFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegValue::IsInitialized() const {
  return true;
}

void GpRegValue::InternalSwap(GpRegValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegValue, value_)
      + sizeof(GpRegValue::value_)
      - PROTOBUF_FIELD_OFFSET(GpRegValue, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpRegValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoryAS::_Internal {
 public:
};

MemoryAS::MemoryAS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAS)
}
MemoryAS::MemoryAS(const MemoryAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&address_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAS)
}

void MemoryAS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&address_)) + sizeof(size_));
}

MemoryAS::~MemoryAS() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryAS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoryAS::ArenaDtor(void* object) {
  MemoryAS* _this = reinterpret_cast< MemoryAS* >(object);
  (void)_this;
}
void MemoryAS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryAS::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&address_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryAS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryAS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAS)
  return target;
}

size_t MemoryAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryAS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.MemoryAS)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryAS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryAS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.MemoryAS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.MemoryAS)
    MergeFrom(*source);
  }
}

void MemoryAS::MergeFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void MemoryAS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryAS::CopyFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAS::IsInitialized() const {
  return true;
}

void MemoryAS::InternalSwap(MemoryAS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryAS, size_)
      + sizeof(MemoryAS::size_)
      - PROTOBUF_FIELD_OFFSET(MemoryAS, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryAS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoryAD::_Internal {
 public:
};

MemoryAD::MemoryAD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAD)
}
MemoryAD::MemoryAD(const MemoryAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAD)
}

void MemoryAD::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_ = 0u;
}

MemoryAD::~MemoryAD() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryAD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryAD::ArenaDtor(void* object) {
  MemoryAD* _this = reinterpret_cast< MemoryAD* >(object);
  (void)_this;
}
void MemoryAD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryAD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryAD::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  address_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryAD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryAD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAD)
  return target;
}

size_t MemoryAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryAD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.MemoryAD)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryAD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryAD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.MemoryAD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.MemoryAD)
    MergeFrom(*source);
  }
}

void MemoryAD::MergeFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void MemoryAD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryAD::CopyFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAD::IsInitialized() const {
  return true;
}

void MemoryAD::InternalSwap(MemoryAD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryAD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DbgBreakpoint::_Internal {
 public:
};

DbgBreakpoint::DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoint)
}
DbgBreakpoint::DbgBreakpoint(const DbgBreakpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_forbid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_forbid_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoint)
}

void DbgBreakpoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_forbid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_forbid_));
}

DbgBreakpoint::~DbgBreakpoint() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbgBreakpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DbgBreakpoint::ArenaDtor(void* object) {
  DbgBreakpoint* _this = reinterpret_cast< DbgBreakpoint* >(object);
  (void)_this;
}
void DbgBreakpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbgBreakpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbgBreakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_forbid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_forbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbgBreakpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.BpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idadebug::BpType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 bstart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_forbid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_forbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbgBreakpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 bstart = 2;
  if (this->bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bstart(), target);
  }

  // uint32 bend = 3;
  if (this->bend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bend(), target);
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  // bool is_forbid = 5;
  if (this->is_forbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_forbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoint)
  return target;
}

size_t DbgBreakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 bstart = 2;
  if (this->bstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bstart());
  }

  // uint32 bend = 3;
  if (this->bend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bend());
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_forbid = 5;
  if (this->is_forbid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbgBreakpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.DbgBreakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DbgBreakpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbgBreakpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.DbgBreakpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.DbgBreakpoint)
    MergeFrom(*source);
  }
}

void DbgBreakpoint::MergeFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.bstart() != 0) {
    _internal_set_bstart(from._internal_bstart());
  }
  if (from.bend() != 0) {
    _internal_set_bend(from._internal_bend());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.is_forbid() != 0) {
    _internal_set_is_forbid(from._internal_is_forbid());
  }
}

void DbgBreakpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbgBreakpoint::CopyFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoint::IsInitialized() const {
  return true;
}

void DbgBreakpoint::InternalSwap(DbgBreakpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbgBreakpoint, is_forbid_)
      + sizeof(DbgBreakpoint::is_forbid_)
      - PROTOBUF_FIELD_OFFSET(DbgBreakpoint, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DbgBreakpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DbgBreakpoints::_Internal {
 public:
};

DbgBreakpoints::DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoints)
}
DbgBreakpoints::DbgBreakpoints(const DbgBreakpoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoints)
}

void DbgBreakpoints::SharedCtor() {
}

DbgBreakpoints::~DbgBreakpoints() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbgBreakpoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DbgBreakpoints::ArenaDtor(void* object) {
  DbgBreakpoints* _this = reinterpret_cast< DbgBreakpoints* >(object);
  (void)_this;
}
void DbgBreakpoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbgBreakpoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbgBreakpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbgBreakpoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .idadebug.DbgBreakpoint list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbgBreakpoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoints)
  return target;
}

size_t DbgBreakpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbgBreakpoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.DbgBreakpoints)
  GOOGLE_DCHECK_NE(&from, this);
  const DbgBreakpoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbgBreakpoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.DbgBreakpoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.DbgBreakpoints)
    MergeFrom(*source);
  }
}

void DbgBreakpoints::MergeFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void DbgBreakpoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbgBreakpoints::CopyFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoints::IsInitialized() const {
  return true;
}

void DbgBreakpoints::InternalSwap(DbgBreakpoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbgBreakpoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Callstack::_Internal {
 public:
};

Callstack::Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  callstack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Callstack)
}
Callstack::Callstack(const Callstack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      callstack_(from.callstack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Callstack)
}

void Callstack::SharedCtor() {
}

Callstack::~Callstack() {
  // @@protoc_insertion_point(destructor:idadebug.Callstack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Callstack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Callstack::ArenaDtor(void* object) {
  Callstack* _this = reinterpret_cast< Callstack* >(object);
  (void)_this;
}
void Callstack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Callstack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Callstack::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Callstack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callstack_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Callstack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 callstack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_callstack(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_callstack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Callstack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Callstack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    int byte_size = _callstack_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_callstack(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Callstack)
  return target;
}

size_t Callstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Callstack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->callstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _callstack_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Callstack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.Callstack)
  GOOGLE_DCHECK_NE(&from, this);
  const Callstack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Callstack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.Callstack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.Callstack)
    MergeFrom(*source);
  }
}

void Callstack::MergeFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Callstack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callstack_.MergeFrom(from.callstack_);
}

void Callstack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Callstack::CopyFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callstack::IsInitialized() const {
  return true;
}

void Callstack::InternalSwap(Callstack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  callstack_.InternalSwap(&other->callstack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Callstack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnyRegValue::_Internal {
 public:
};

AnyRegValue::AnyRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.AnyRegValue)
}
AnyRegValue::AnyRegValue(const AnyRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:idadebug.AnyRegValue)
}

void AnyRegValue::SharedCtor() {
value_ = 0u;
}

AnyRegValue::~AnyRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.AnyRegValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnyRegValue::ArenaDtor(void* object) {
  AnyRegValue* _this = reinterpret_cast< AnyRegValue* >(object);
  (void)_this;
}
void AnyRegValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyRegValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.AnyRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyRegValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyRegValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.AnyRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.AnyRegValue)
  return target;
}

size_t AnyRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.AnyRegValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyRegValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.AnyRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyRegValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyRegValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.AnyRegValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.AnyRegValue)
    MergeFrom(*source);
  }
}

void AnyRegValue::MergeFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.AnyRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AnyRegValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyRegValue::CopyFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyRegValue::IsInitialized() const {
  return true;
}

void AnyRegValue::InternalSwap(AnyRegValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyRegValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemData::_Internal {
 public:
};

MemData::MemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemData)
}
MemData::MemData(const MemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:idadebug.MemData)
}

void MemData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MemData::~MemData() {
  // @@protoc_insertion_point(destructor:idadebug.MemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemData::ArenaDtor(void* object) {
  MemData* _this = reinterpret_cast< MemData* >(object);
  (void)_this;
}
void MemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemData)
  return target;
}

size_t MemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.MemData)
  GOOGLE_DCHECK_NE(&from, this);
  const MemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.MemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.MemData)
    MergeFrom(*source);
  }
}

void MemData::MergeFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void MemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemData::CopyFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemData::IsInitialized() const {
  return true;
}

void MemData::InternalSwap(MemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SoundBankRange::_Internal {
 public:
};

SoundBankRange::SoundBankRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.SoundBankRange)
}
SoundBankRange::SoundBankRange(const SoundBankRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&bank_min_, &from.bank_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&bank_max_) -
    reinterpret_cast<char*>(&bank_min_)) + sizeof(bank_max_));
  // @@protoc_insertion_point(copy_constructor:idadebug.SoundBankRange)
}

void SoundBankRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bank_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bank_max_) -
    reinterpret_cast<char*>(&bank_min_)) + sizeof(bank_max_));
}

SoundBankRange::~SoundBankRange() {
  // @@protoc_insertion_point(destructor:idadebug.SoundBankRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundBankRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SoundBankRange::ArenaDtor(void* object) {
  SoundBankRange* _this = reinterpret_cast< SoundBankRange* >(object);
  (void)_this;
}
void SoundBankRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundBankRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SoundBankRange::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.SoundBankRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bank_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bank_max_) -
      reinterpret_cast<char*>(&bank_min_)) + sizeof(bank_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundBankRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 bank_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bank_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bank_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bank_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundBankRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.SoundBankRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bank_min = 1;
  if (this->bank_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bank_min(), target);
  }

  // uint32 bank_max = 2;
  if (this->bank_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bank_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.SoundBankRange)
  return target;
}

size_t SoundBankRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.SoundBankRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bank_min = 1;
  if (this->bank_min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bank_min());
  }

  // uint32 bank_max = 2;
  if (this->bank_max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bank_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundBankRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.SoundBankRange)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundBankRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundBankRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.SoundBankRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.SoundBankRange)
    MergeFrom(*source);
  }
}

void SoundBankRange::MergeFrom(const SoundBankRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.SoundBankRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bank_min() != 0) {
    _internal_set_bank_min(from._internal_bank_min());
  }
  if (from.bank_max() != 0) {
    _internal_set_bank_max(from._internal_bank_max());
  }
}

void SoundBankRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.SoundBankRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundBankRange::CopyFrom(const SoundBankRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.SoundBankRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundBankRange::IsInitialized() const {
  return true;
}

void SoundBankRange::InternalSwap(SoundBankRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoundBankRange, bank_max_)
      + sizeof(SoundBankRange::bank_max_)
      - PROTOBUF_FIELD_OFFSET(SoundBankRange, bank_min_)>(
          reinterpret_cast<char*>(&bank_min_),
          reinterpret_cast<char*>(&other->bank_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundBankRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SoundBankMap_RangeEntry_DoNotUse::SoundBankMap_RangeEntry_DoNotUse() {}
SoundBankMap_RangeEntry_DoNotUse::SoundBankMap_RangeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SoundBankMap_RangeEntry_DoNotUse::MergeFrom(const SoundBankMap_RangeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SoundBankMap_RangeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SoundBankMap_RangeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class SoundBankMap::_Internal {
 public:
};

SoundBankMap::SoundBankMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.SoundBankMap)
}
SoundBankMap::SoundBankMap(const SoundBankMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  range_.MergeFrom(from.range_);
  // @@protoc_insertion_point(copy_constructor:idadebug.SoundBankMap)
}

void SoundBankMap::SharedCtor() {
}

SoundBankMap::~SoundBankMap() {
  // @@protoc_insertion_point(destructor:idadebug.SoundBankMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoundBankMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SoundBankMap::ArenaDtor(void* object) {
  SoundBankMap* _this = reinterpret_cast< SoundBankMap* >(object);
  (void)_this;
}
void SoundBankMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoundBankMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SoundBankMap::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.SoundBankMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoundBankMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, .idadebug.SoundBankRange> range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&range_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoundBankMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.SoundBankMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .idadebug.SoundBankRange> range = 1;
  if (!this->_internal_range().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::idadebug::SoundBankRange >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_range().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_range().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::idadebug::SoundBankRange >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::idadebug::SoundBankRange >::const_iterator
          it = this->_internal_range().begin();
          it != this->_internal_range().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SoundBankMap_RangeEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::idadebug::SoundBankRange >::const_iterator
          it = this->_internal_range().begin();
          it != this->_internal_range().end(); ++it) {
        target = SoundBankMap_RangeEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.SoundBankMap)
  return target;
}

size_t SoundBankMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.SoundBankMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .idadebug.SoundBankRange> range = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_range_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::idadebug::SoundBankRange >::const_iterator
      it = this->_internal_range().begin();
      it != this->_internal_range().end(); ++it) {
    total_size += SoundBankMap_RangeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoundBankMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.SoundBankMap)
  GOOGLE_DCHECK_NE(&from, this);
  const SoundBankMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoundBankMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.SoundBankMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.SoundBankMap)
    MergeFrom(*source);
  }
}

void SoundBankMap::MergeFrom(const SoundBankMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.SoundBankMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_.MergeFrom(from.range_);
}

void SoundBankMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.SoundBankMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundBankMap::CopyFrom(const SoundBankMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.SoundBankMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundBankMap::IsInitialized() const {
  return true;
}

void SoundBankMap::InternalSwap(SoundBankMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  range_.Swap(&other->range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoundBankMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse() {}
PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PauseChanged_ChangedEntry_DoNotUse::MergeFrom(const PauseChanged_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PauseChanged_ChangedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PauseChanged_ChangedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class PauseChanged::_Internal {
 public:
};

PauseChanged::PauseChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  changed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.PauseChanged)
}
PauseChanged::PauseChanged(const PauseChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  changed_.MergeFrom(from.changed_);
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.PauseChanged)
}

void PauseChanged::SharedCtor() {
address_ = 0u;
}

PauseChanged::~PauseChanged() {
  // @@protoc_insertion_point(destructor:idadebug.PauseChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PauseChanged::ArenaDtor(void* object) {
  PauseChanged* _this = reinterpret_cast< PauseChanged* >(object);
  (void)_this;
}
void PauseChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PauseChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.PauseChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_.Clear();
  address_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.PauseChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // map<uint32, uint32> changed = 2;
  if (!this->_internal_changed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_changed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_changed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PauseChanged_ChangedEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it) {
        target = PauseChanged_ChangedEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.PauseChanged)
  return target;
}

size_t PauseChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.PauseChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += PauseChanged_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.PauseChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.PauseChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.PauseChanged)
    MergeFrom(*source);
  }
}

void PauseChanged::MergeFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.PauseChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_.MergeFrom(from.changed_);
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void PauseChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseChanged::CopyFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseChanged::IsInitialized() const {
  return true;
}

void PauseChanged::InternalSwap(PauseChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  changed_.Swap(&other->changed_);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse() {}
Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Changed_ChangedEntry_DoNotUse::MergeFrom(const Changed_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Changed_ChangedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Changed_ChangedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Changed::_Internal {
 public:
};

Changed::Changed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  changed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Changed)
}
Changed::Changed(const Changed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  changed_.MergeFrom(from.changed_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Changed)
}

void Changed::SharedCtor() {
}

Changed::~Changed() {
  // @@protoc_insertion_point(destructor:idadebug.Changed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Changed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Changed::ArenaDtor(void* object) {
  Changed* _this = reinterpret_cast< Changed* >(object);
  (void)_this;
}
void Changed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Changed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Changed::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Changed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Changed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, uint32> changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Changed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Changed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  if (!this->_internal_changed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_changed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_changed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Changed_ChangedEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it) {
        target = Changed_ChangedEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Changed)
  return target;
}

size_t Changed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Changed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += Changed_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Changed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.Changed)
  GOOGLE_DCHECK_NE(&from, this);
  const Changed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Changed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.Changed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.Changed)
    MergeFrom(*source);
  }
}

void Changed::MergeFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Changed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_.MergeFrom(from.changed_);
}

void Changed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Changed::CopyFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Changed::IsInitialized() const {
  return true;
}

void Changed::InternalSwap(Changed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  changed_.Swap(&other->changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Changed::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idadebug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idadebug::GpReg* Arena::CreateMaybeMessage< ::idadebug::GpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegs* Arena::CreateMaybeMessage< ::idadebug::GpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegValue* Arena::CreateMaybeMessage< ::idadebug::GpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAS* Arena::CreateMaybeMessage< ::idadebug::MemoryAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAS >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAD* Arena::CreateMaybeMessage< ::idadebug::MemoryAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAD >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoint* Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoints* Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoints >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Callstack* Arena::CreateMaybeMessage< ::idadebug::Callstack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Callstack >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::AnyRegValue* Arena::CreateMaybeMessage< ::idadebug::AnyRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::AnyRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemData* Arena::CreateMaybeMessage< ::idadebug::MemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemData >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::SoundBankRange* Arena::CreateMaybeMessage< ::idadebug::SoundBankRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::SoundBankRange >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::SoundBankMap_RangeEntry_DoNotUse* Arena::CreateMaybeMessage< ::idadebug::SoundBankMap_RangeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::SoundBankMap_RangeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::SoundBankMap* Arena::CreateMaybeMessage< ::idadebug::SoundBankMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::SoundBankMap >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged* Arena::CreateMaybeMessage< ::idadebug::PauseChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage< ::idadebug::Changed_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed* Arena::CreateMaybeMessage< ::idadebug::Changed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
