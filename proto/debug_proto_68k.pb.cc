// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: debug_proto_68k.proto

#include "debug_proto_68k.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace idadebug {
constexpr GpReg::GpReg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reg_(0)
{}
struct GpRegDefaultTypeInternal {
  constexpr GpRegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpRegDefaultTypeInternal() {}
  union {
    GpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpRegDefaultTypeInternal _GpReg_default_instance_;
constexpr GpRegs::GpRegs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : d0_(0u)
  , d1_(0u)
  , d2_(0u)
  , d3_(0u)
  , d4_(0u)
  , d5_(0u)
  , d6_(0u)
  , d7_(0u)
  , a0_(0u)
  , a1_(0u)
  , a2_(0u)
  , a3_(0u)
  , a4_(0u)
  , a5_(0u)
  , a6_(0u)
  , a7_(0u)
  , pc_(0u)
  , sr_(0u)
  , sp_(0u){}
struct GpRegsDefaultTypeInternal {
  constexpr GpRegsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpRegsDefaultTypeInternal() {}
  union {
    GpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpRegsDefaultTypeInternal _GpRegs_default_instance_;
constexpr GpRegValue::GpRegValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)

  , value_(0u){}
struct GpRegValueDefaultTypeInternal {
  constexpr GpRegValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpRegValueDefaultTypeInternal() {}
  union {
    GpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpRegValueDefaultTypeInternal _GpRegValue_default_instance_;
constexpr VdpReg::VdpReg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reg_(0)
{}
struct VdpRegDefaultTypeInternal {
  constexpr VdpRegDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VdpRegDefaultTypeInternal() {}
  union {
    VdpReg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VdpRegDefaultTypeInternal _VdpReg_default_instance_;
constexpr VdpRegs::VdpRegs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : v00_(0u)
  , v01_(0u)
  , v02_(0u)
  , v03_(0u)
  , v04_(0u)
  , v05_(0u)
  , v06_(0u)
  , v07_(0u)
  , v08_(0u)
  , v09_(0u)
  , v0a_(0u)
  , v0b_(0u)
  , v0c_(0u)
  , v0d_(0u)
  , v0e_(0u)
  , v0f_(0u)
  , v10_(0u)
  , v11_(0u)
  , v12_(0u)
  , v13_(0u)
  , v14_(0u)
  , v15_(0u)
  , v16_(0u)
  , v17_(0u){}
struct VdpRegsDefaultTypeInternal {
  constexpr VdpRegsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VdpRegsDefaultTypeInternal() {}
  union {
    VdpRegs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VdpRegsDefaultTypeInternal _VdpRegs_default_instance_;
constexpr VdpRegValue::VdpRegValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : index_(0)

  , value_(0u){}
struct VdpRegValueDefaultTypeInternal {
  constexpr VdpRegValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VdpRegValueDefaultTypeInternal() {}
  union {
    VdpRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VdpRegValueDefaultTypeInternal _VdpRegValue_default_instance_;
constexpr DmaInfo::DmaInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : len_(0u)
  , src_(0u)
  , dst_(0u){}
struct DmaInfoDefaultTypeInternal {
  constexpr DmaInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DmaInfoDefaultTypeInternal() {}
  union {
    DmaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DmaInfoDefaultTypeInternal _DmaInfo_default_instance_;
constexpr MemoryAS::MemoryAS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : address_(0u)
  , size_(0u){}
struct MemoryASDefaultTypeInternal {
  constexpr MemoryASDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryASDefaultTypeInternal() {}
  union {
    MemoryAS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryASDefaultTypeInternal _MemoryAS_default_instance_;
constexpr MemoryAD::MemoryAD(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(0u){}
struct MemoryADDefaultTypeInternal {
  constexpr MemoryADDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemoryADDefaultTypeInternal() {}
  union {
    MemoryAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemoryADDefaultTypeInternal _MemoryAD_default_instance_;
constexpr DbgBreakpoint::DbgBreakpoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , bstart_(0u)
  , bend_(0u)
  , enabled_(false)
  , is_vdp_(false)
  , is_forbid_(false){}
struct DbgBreakpointDefaultTypeInternal {
  constexpr DbgBreakpointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbgBreakpointDefaultTypeInternal() {}
  union {
    DbgBreakpoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbgBreakpointDefaultTypeInternal _DbgBreakpoint_default_instance_;
constexpr DbgBreakpoints::DbgBreakpoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : list_(){}
struct DbgBreakpointsDefaultTypeInternal {
  constexpr DbgBreakpointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DbgBreakpointsDefaultTypeInternal() {}
  union {
    DbgBreakpoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DbgBreakpointsDefaultTypeInternal _DbgBreakpoints_default_instance_;
constexpr Callstack::Callstack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : callstack_()
  , _callstack_cached_byte_size_(){}
struct CallstackDefaultTypeInternal {
  constexpr CallstackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CallstackDefaultTypeInternal() {}
  union {
    Callstack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CallstackDefaultTypeInternal _Callstack_default_instance_;
constexpr AnyRegValue::AnyRegValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u){}
struct AnyRegValueDefaultTypeInternal {
  constexpr AnyRegValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AnyRegValueDefaultTypeInternal() {}
  union {
    AnyRegValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AnyRegValueDefaultTypeInternal _AnyRegValue_default_instance_;
constexpr MemData::MemData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MemDataDefaultTypeInternal {
  constexpr MemDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MemDataDefaultTypeInternal() {}
  union {
    MemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MemDataDefaultTypeInternal _MemData_default_instance_;
constexpr PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal {
  constexpr PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PauseChanged_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseChanged_ChangedEntry_DoNotUseDefaultTypeInternal _PauseChanged_ChangedEntry_DoNotUse_default_instance_;
constexpr PauseChanged::PauseChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : changed_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , address_(0u){}
struct PauseChangedDefaultTypeInternal {
  constexpr PauseChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PauseChangedDefaultTypeInternal() {}
  union {
    PauseChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PauseChangedDefaultTypeInternal _PauseChanged_default_instance_;
constexpr Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Changed_ChangedEntry_DoNotUseDefaultTypeInternal {
  constexpr Changed_ChangedEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Changed_ChangedEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Changed_ChangedEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Changed_ChangedEntry_DoNotUseDefaultTypeInternal _Changed_ChangedEntry_DoNotUse_default_instance_;
constexpr Changed::Changed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : changed_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ChangedDefaultTypeInternal {
  constexpr ChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangedDefaultTypeInternal() {}
  union {
    Changed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangedDefaultTypeInternal _Changed_default_instance_;
}  // namespace idadebug
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_debug_5fproto_5f68k_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_debug_5fproto_5f68k_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_debug_5fproto_5f68k_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpReg, reg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d0_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d1_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d3_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d4_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d5_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d6_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, d7_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a0_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a1_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a2_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a3_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a4_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a5_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a6_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, a7_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, pc_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, sr_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegs, sp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, index_),
  PROTOBUF_FIELD_OFFSET(::idadebug::GpRegValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpReg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpReg, reg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v00_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v01_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v02_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v03_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v04_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v05_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v06_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v07_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v08_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v09_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v0a_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v0b_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v0c_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v0d_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v0e_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v0f_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v10_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v11_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v12_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v13_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v14_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v15_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v16_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegs, v17_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegValue, index_),
  PROTOBUF_FIELD_OFFSET(::idadebug::VdpRegValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, len_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, src_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DmaInfo, dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAS, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::MemoryAD, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, type_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, bstart_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, bend_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, enabled_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, is_vdp_),
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoint, is_forbid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::DbgBreakpoints, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::Callstack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::Callstack, callstack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::AnyRegValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::AnyRegValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::MemData, data_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged_ChangedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, address_),
  PROTOBUF_FIELD_OFFSET(::idadebug::PauseChanged, changed_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed_ChangedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::idadebug::Changed, changed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::idadebug::GpReg)},
  { 6, -1, sizeof(::idadebug::GpRegs)},
  { 30, -1, sizeof(::idadebug::GpRegValue)},
  { 37, -1, sizeof(::idadebug::VdpReg)},
  { 43, -1, sizeof(::idadebug::VdpRegs)},
  { 72, -1, sizeof(::idadebug::VdpRegValue)},
  { 79, -1, sizeof(::idadebug::DmaInfo)},
  { 87, -1, sizeof(::idadebug::MemoryAS)},
  { 94, -1, sizeof(::idadebug::MemoryAD)},
  { 101, -1, sizeof(::idadebug::DbgBreakpoint)},
  { 112, -1, sizeof(::idadebug::DbgBreakpoints)},
  { 118, -1, sizeof(::idadebug::Callstack)},
  { 124, -1, sizeof(::idadebug::AnyRegValue)},
  { 130, -1, sizeof(::idadebug::MemData)},
  { 136, 143, sizeof(::idadebug::PauseChanged_ChangedEntry_DoNotUse)},
  { 145, -1, sizeof(::idadebug::PauseChanged)},
  { 152, 159, sizeof(::idadebug::Changed_ChangedEntry_DoNotUse)},
  { 161, -1, sizeof(::idadebug::Changed)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_GpReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_GpRegs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_GpRegValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_VdpReg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_VdpRegs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_VdpRegValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_DmaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_MemoryAS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_MemoryAD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_DbgBreakpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_DbgBreakpoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_Callstack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_AnyRegValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_MemData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_PauseChanged_ChangedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_PauseChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_Changed_ChangedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::idadebug::_Changed_default_instance_),
};

const char descriptor_table_protodef_debug_5fproto_5f68k_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025debug_proto_68k.proto\022\010idadebug\032\033googl"
  "e/protobuf/empty.proto\"*\n\005GpReg\022!\n\003reg\030\001"
  " \001(\0162\024.idadebug.GpRegsEnum\"\354\001\n\006GpRegs\022\n\n"
  "\002D0\030\001 \001(\r\022\n\n\002D1\030\002 \001(\r\022\n\n\002D2\030\003 \001(\r\022\n\n\002D3\030"
  "\004 \001(\r\022\n\n\002D4\030\005 \001(\r\022\n\n\002D5\030\006 \001(\r\022\n\n\002D6\030\007 \001("
  "\r\022\n\n\002D7\030\010 \001(\r\022\n\n\002A0\030\t \001(\r\022\n\n\002A1\030\n \001(\r\022\n\n"
  "\002A2\030\013 \001(\r\022\n\n\002A3\030\014 \001(\r\022\n\n\002A4\030\r \001(\r\022\n\n\002A5\030"
  "\016 \001(\r\022\n\n\002A6\030\017 \001(\r\022\n\n\002A7\030\020 \001(\r\022\n\n\002PC\030\021 \001("
  "\r\022\n\n\002SR\030\022 \001(\r\022\n\n\002SP\030\023 \001(\r\"@\n\nGpRegValue\022"
  "#\n\005index\030\001 \001(\0162\024.idadebug.GpRegsEnum\022\r\n\005"
  "value\030\002 \001(\r\",\n\006VdpReg\022\"\n\003reg\030\001 \001(\0162\025.ida"
  "debug.VdpRegsEnum\"\301\002\n\007VdpRegs\022\013\n\003V00\030\001 \001"
  "(\r\022\013\n\003V01\030\002 \001(\r\022\013\n\003V02\030\003 \001(\r\022\013\n\003V03\030\004 \001("
  "\r\022\013\n\003V04\030\005 \001(\r\022\013\n\003V05\030\006 \001(\r\022\013\n\003V06\030\007 \001(\r"
  "\022\013\n\003V07\030\010 \001(\r\022\013\n\003V08\030\t \001(\r\022\013\n\003V09\030\n \001(\r\022"
  "\013\n\003V0A\030\013 \001(\r\022\013\n\003V0B\030\014 \001(\r\022\013\n\003V0C\030\r \001(\r\022\013"
  "\n\003V0D\030\016 \001(\r\022\013\n\003V0E\030\017 \001(\r\022\013\n\003V0F\030\020 \001(\r\022\013\n"
  "\003V10\030\021 \001(\r\022\013\n\003V11\030\022 \001(\r\022\013\n\003V12\030\023 \001(\r\022\013\n\003"
  "V13\030\024 \001(\r\022\013\n\003V14\030\025 \001(\r\022\013\n\003V15\030\026 \001(\r\022\013\n\003V"
  "16\030\027 \001(\r\022\013\n\003V17\030\030 \001(\r\"B\n\013VdpRegValue\022$\n\005"
  "index\030\001 \001(\0162\025.idadebug.VdpRegsEnum\022\r\n\005va"
  "lue\030\002 \001(\r\"0\n\007DmaInfo\022\013\n\003len\030\001 \001(\r\022\013\n\003src"
  "\030\002 \001(\r\022\013\n\003dst\030\003 \001(\r\")\n\010MemoryAS\022\017\n\007addre"
  "ss\030\001 \001(\r\022\014\n\004size\030\002 \001(\r\")\n\010MemoryAD\022\017\n\007ad"
  "dress\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\"\201\001\n\rDbgBreakpo"
  "int\022\036\n\004type\030\001 \001(\0162\020.idadebug.BpType\022\016\n\006b"
  "start\030\002 \001(\r\022\014\n\004bend\030\003 \001(\r\022\017\n\007enabled\030\004 \001"
  "(\010\022\016\n\006is_vdp\030\005 \001(\010\022\021\n\tis_forbid\030\006 \001(\010\"7\n"
  "\016DbgBreakpoints\022%\n\004list\030\001 \003(\0132\027.idadebug"
  ".DbgBreakpoint\"\036\n\tCallstack\022\021\n\tcallstack"
  "\030\001 \003(\r\"\034\n\013AnyRegValue\022\r\n\005value\030\001 \001(\r\"\027\n\007"
  "MemData\022\014\n\004data\030\001 \001(\014\"\205\001\n\014PauseChanged\022\017"
  "\n\007address\030\001 \001(\r\0224\n\007changed\030\002 \003(\0132#.idade"
  "bug.PauseChanged.ChangedEntry\032.\n\014Changed"
  "Entry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"j\n"
  "\007Changed\022/\n\007changed\030\001 \003(\0132\036.idadebug.Cha"
  "nged.ChangedEntry\032.\n\014ChangedEntry\022\013\n\003key"
  "\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001*\244\001\n\nGpRegsEnum"
  "\022\006\n\002D0\020\000\022\006\n\002D1\020\001\022\006\n\002D2\020\002\022\006\n\002D3\020\003\022\006\n\002D4\020\004"
  "\022\006\n\002D5\020\005\022\006\n\002D6\020\006\022\006\n\002D7\020\007\022\006\n\002A0\020\010\022\006\n\002A1\020\t"
  "\022\006\n\002A2\020\n\022\006\n\002A3\020\013\022\006\n\002A4\020\014\022\006\n\002A5\020\r\022\006\n\002A6\020\016"
  "\022\006\n\002A7\020\017\022\006\n\002PC\020\020\022\006\n\002SR\020\021\022\006\n\002SP\020\022*\345\001\n\013Vdp"
  "RegsEnum\022\007\n\003V00\020\000\022\007\n\003V01\020\001\022\007\n\003V02\020\002\022\007\n\003V"
  "03\020\003\022\007\n\003V04\020\004\022\007\n\003V05\020\005\022\007\n\003V06\020\006\022\007\n\003V07\020\007"
  "\022\007\n\003V08\020\010\022\007\n\003V09\020\t\022\007\n\003V0A\020\n\022\007\n\003V0B\020\013\022\007\n\003"
  "V0C\020\014\022\007\n\003V0D\020\r\022\007\n\003V0E\020\016\022\007\n\003V0F\020\017\022\007\n\003V10\020"
  "\020\022\007\n\003V11\020\021\022\007\n\003V12\020\022\022\007\n\003V13\020\023\022\007\n\003V14\020\024\022\007\n"
  "\003V15\020\025\022\007\n\003V16\020\026\022\007\n\003V17\020\027*9\n\006BpType\022\t\n\005DU"
  "MMY\020\000\022\t\n\005BP_PC\020\001\022\013\n\007BP_READ\020\002\022\014\n\010BP_WRIT"
  "E\020\0032\214\013\n\tDbgServer\0226\n\nget_gp_reg\022\017.idadeb"
  "ug.GpReg\032\025.idadebug.AnyRegValue\"\000\0229\n\013get"
  "_gp_regs\022\026.google.protobuf.Empty\032\020.idade"
  "bug.GpRegs\"\000\022<\n\nset_gp_reg\022\024.idadebug.Gp"
  "RegValue\032\026.google.protobuf.Empty\"\000\0228\n\013ge"
  "t_vdp_reg\022\020.idadebug.VdpReg\032\025.idadebug.A"
  "nyRegValue\"\000\022;\n\014get_vdp_regs\022\026.google.pr"
  "otobuf.Empty\032\021.idadebug.VdpRegs\"\000\022>\n\013set"
  "_vdp_reg\022\025.idadebug.VdpRegValue\032\026.google"
  ".protobuf.Empty\"\000\022;\n\014get_dma_info\022\026.goog"
  "le.protobuf.Empty\032\021.idadebug.DmaInfo\"\000\0226"
  "\n\013read_memory\022\022.idadebug.MemoryAS\032\021.idad"
  "ebug.MemData\"\000\022<\n\014write_memory\022\022.idadebu"
  "g.MemoryAD\032\026.google.protobuf.Empty\"\000\022E\n\017"
  "get_breakpoints\022\026.google.protobuf.Empty\032"
  "\030.idadebug.DbgBreakpoints\"\000\022C\n\016add_break"
  "point\022\027.idadebug.DbgBreakpoint\032\026.google."
  "protobuf.Empty\"\000\022F\n\021toggle_breakpoint\022\027."
  "idadebug.DbgBreakpoint\032\026.google.protobuf"
  ".Empty\"\000\022F\n\021update_breakpoint\022\027.idadebug"
  ".DbgBreakpoint\032\026.google.protobuf.Empty\"\000"
  "\022C\n\016del_breakpoint\022\027.idadebug.DbgBreakpo"
  "int\032\026.google.protobuf.Empty\"\000\022E\n\021clear_b"
  "reakpoints\022\026.google.protobuf.Empty\032\026.goo"
  "gle.protobuf.Empty\"\000\0229\n\005pause\022\026.google.p"
  "rotobuf.Empty\032\026.google.protobuf.Empty\"\000\022"
  ":\n\006resume\022\026.google.protobuf.Empty\032\026.goog"
  "le.protobuf.Empty\"\000\022C\n\017start_emulation\022\026"
  ".google.protobuf.Empty\032\026.google.protobuf"
  ".Empty\"\000\022B\n\016exit_emulation\022\026.google.prot"
  "obuf.Empty\032\026.google.protobuf.Empty\"\000\022=\n\t"
  "step_into\022\026.google.protobuf.Empty\032\026.goog"
  "le.protobuf.Empty\"\000\022=\n\tstep_over\022\026.googl"
  "e.protobuf.Empty\032\026.google.protobuf.Empty"
  "\"\000\022>\n\rget_callstack\022\026.google.protobuf.Em"
  "pty\032\023.idadebug.Callstack\"\0002\310\001\n\tDbgClient"
  "\022\?\n\013start_event\022\026.google.protobuf.Empty\032"
  "\026.google.protobuf.Empty\"\000\022\?\n\013pause_event"
  "\022\026.idadebug.PauseChanged\032\026.google.protob"
  "uf.Empty\"\000\0229\n\nstop_event\022\021.idadebug.Chan"
  "ged\032\026.google.protobuf.Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_debug_5fproto_5f68k_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_debug_5fproto_5f68k_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_debug_5fproto_5f68k_2eproto = {
  false, false, 3597, descriptor_table_protodef_debug_5fproto_5f68k_2eproto, "debug_proto_68k.proto", 
  &descriptor_table_debug_5fproto_5f68k_2eproto_once, descriptor_table_debug_5fproto_5f68k_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_debug_5fproto_5f68k_2eproto::offsets,
  file_level_metadata_debug_5fproto_5f68k_2eproto, file_level_enum_descriptors_debug_5fproto_5f68k_2eproto, file_level_service_descriptors_debug_5fproto_5f68k_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_debug_5fproto_5f68k_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return descriptor_table_debug_5fproto_5f68k_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_debug_5fproto_5f68k_2eproto(&descriptor_table_debug_5fproto_5f68k_2eproto);
namespace idadebug {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GpRegsEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[0];
}
bool GpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VdpRegsEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[1];
}
bool VdpRegsEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_debug_5fproto_5f68k_2eproto);
  return file_level_enum_descriptors_debug_5fproto_5f68k_2eproto[2];
}
bool BpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GpReg::_Internal {
 public:
};

GpReg::GpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpReg)
}
GpReg::GpReg(const GpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reg_ = from.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.GpReg)
}

void GpReg::SharedCtor() {
reg_ = 0;
}

GpReg::~GpReg() {
  // @@protoc_insertion_point(destructor:idadebug.GpReg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpReg::ArenaDtor(void* object) {
  GpReg* _this = reinterpret_cast< GpReg* >(object);
  (void)_this;
}
void GpReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::GpRegsEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpReg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpReg)
  return target;
}

size_t GpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpReg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum reg = 1;
  if (this->reg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpReg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.GpReg)
  GOOGLE_DCHECK_NE(&from, this);
  const GpReg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpReg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.GpReg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.GpReg)
    MergeFrom(*source);
  }
}

void GpReg::MergeFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpReg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg() != 0) {
    _internal_set_reg(from._internal_reg());
  }
}

void GpReg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpReg::CopyFrom(const GpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpReg::IsInitialized() const {
  return true;
}

void GpReg::InternalSwap(GpReg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reg_, other->reg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GpReg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpRegs::_Internal {
 public:
};

GpRegs::GpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegs)
}
GpRegs::GpRegs(const GpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&d0_, &from.d0_,
    static_cast<size_t>(reinterpret_cast<char*>(&sp_) -
    reinterpret_cast<char*>(&d0_)) + sizeof(sp_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegs)
}

void GpRegs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&d0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sp_) -
    reinterpret_cast<char*>(&d0_)) + sizeof(sp_));
}

GpRegs::~GpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpRegs::ArenaDtor(void* object) {
  GpRegs* _this = reinterpret_cast< GpRegs* >(object);
  (void)_this;
}
void GpRegs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpRegs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&d0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sp_) -
      reinterpret_cast<char*>(&d0_)) + sizeof(sp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpRegs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 D0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          d0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          d1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          d2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          d3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          d4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          d5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          d6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 D7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          d7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A0 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          a0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A2 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          a5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A6 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          a6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 A7 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          a7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PC = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          pc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SR = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          sr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 SP = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          sp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpRegs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->d0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_d0(), target);
  }

  // uint32 D1 = 2;
  if (this->d1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_d1(), target);
  }

  // uint32 D2 = 3;
  if (this->d2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_d2(), target);
  }

  // uint32 D3 = 4;
  if (this->d3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_d3(), target);
  }

  // uint32 D4 = 5;
  if (this->d4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_d4(), target);
  }

  // uint32 D5 = 6;
  if (this->d5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_d5(), target);
  }

  // uint32 D6 = 7;
  if (this->d6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_d6(), target);
  }

  // uint32 D7 = 8;
  if (this->d7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_d7(), target);
  }

  // uint32 A0 = 9;
  if (this->a0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_a0(), target);
  }

  // uint32 A1 = 10;
  if (this->a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_a1(), target);
  }

  // uint32 A2 = 11;
  if (this->a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_a2(), target);
  }

  // uint32 A3 = 12;
  if (this->a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_a3(), target);
  }

  // uint32 A4 = 13;
  if (this->a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_a4(), target);
  }

  // uint32 A5 = 14;
  if (this->a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_a5(), target);
  }

  // uint32 A6 = 15;
  if (this->a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_a6(), target);
  }

  // uint32 A7 = 16;
  if (this->a7() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_a7(), target);
  }

  // uint32 PC = 17;
  if (this->pc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pc(), target);
  }

  // uint32 SR = 18;
  if (this->sr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sr(), target);
  }

  // uint32 SP = 19;
  if (this->sp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_sp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegs)
  return target;
}

size_t GpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 D0 = 1;
  if (this->d0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d0());
  }

  // uint32 D1 = 2;
  if (this->d1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d1());
  }

  // uint32 D2 = 3;
  if (this->d2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d2());
  }

  // uint32 D3 = 4;
  if (this->d3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d3());
  }

  // uint32 D4 = 5;
  if (this->d4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d4());
  }

  // uint32 D5 = 6;
  if (this->d5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d5());
  }

  // uint32 D6 = 7;
  if (this->d6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d6());
  }

  // uint32 D7 = 8;
  if (this->d7() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_d7());
  }

  // uint32 A0 = 9;
  if (this->a0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a0());
  }

  // uint32 A1 = 10;
  if (this->a1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a1());
  }

  // uint32 A2 = 11;
  if (this->a2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a2());
  }

  // uint32 A3 = 12;
  if (this->a3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a3());
  }

  // uint32 A4 = 13;
  if (this->a4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a4());
  }

  // uint32 A5 = 14;
  if (this->a5() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a5());
  }

  // uint32 A6 = 15;
  if (this->a6() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a6());
  }

  // uint32 A7 = 16;
  if (this->a7() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_a7());
  }

  // uint32 PC = 17;
  if (this->pc() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pc());
  }

  // uint32 SR = 18;
  if (this->sr() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sr());
  }

  // uint32 SP = 19;
  if (this->sp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpRegs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.GpRegs)
  GOOGLE_DCHECK_NE(&from, this);
  const GpRegs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpRegs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.GpRegs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.GpRegs)
    MergeFrom(*source);
  }
}

void GpRegs::MergeFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.d0() != 0) {
    _internal_set_d0(from._internal_d0());
  }
  if (from.d1() != 0) {
    _internal_set_d1(from._internal_d1());
  }
  if (from.d2() != 0) {
    _internal_set_d2(from._internal_d2());
  }
  if (from.d3() != 0) {
    _internal_set_d3(from._internal_d3());
  }
  if (from.d4() != 0) {
    _internal_set_d4(from._internal_d4());
  }
  if (from.d5() != 0) {
    _internal_set_d5(from._internal_d5());
  }
  if (from.d6() != 0) {
    _internal_set_d6(from._internal_d6());
  }
  if (from.d7() != 0) {
    _internal_set_d7(from._internal_d7());
  }
  if (from.a0() != 0) {
    _internal_set_a0(from._internal_a0());
  }
  if (from.a1() != 0) {
    _internal_set_a1(from._internal_a1());
  }
  if (from.a2() != 0) {
    _internal_set_a2(from._internal_a2());
  }
  if (from.a3() != 0) {
    _internal_set_a3(from._internal_a3());
  }
  if (from.a4() != 0) {
    _internal_set_a4(from._internal_a4());
  }
  if (from.a5() != 0) {
    _internal_set_a5(from._internal_a5());
  }
  if (from.a6() != 0) {
    _internal_set_a6(from._internal_a6());
  }
  if (from.a7() != 0) {
    _internal_set_a7(from._internal_a7());
  }
  if (from.pc() != 0) {
    _internal_set_pc(from._internal_pc());
  }
  if (from.sr() != 0) {
    _internal_set_sr(from._internal_sr());
  }
  if (from.sp() != 0) {
    _internal_set_sp(from._internal_sp());
  }
}

void GpRegs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpRegs::CopyFrom(const GpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegs::IsInitialized() const {
  return true;
}

void GpRegs::InternalSwap(GpRegs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegs, sp_)
      + sizeof(GpRegs::sp_)
      - PROTOBUF_FIELD_OFFSET(GpRegs, d0_)>(
          reinterpret_cast<char*>(&d0_),
          reinterpret_cast<char*>(&other->d0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpRegs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GpRegValue::_Internal {
 public:
};

GpRegValue::GpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.GpRegValue)
}
GpRegValue::GpRegValue(const GpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.GpRegValue)
}

void GpRegValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
}

GpRegValue::~GpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.GpRegValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GpRegValue::ArenaDtor(void* object) {
  GpRegValue* _this = reinterpret_cast< GpRegValue* >(object);
  (void)_this;
}
void GpRegValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GpRegValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.GpRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GpRegValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.GpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::GpRegsEnum>(val));
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GpRegValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.GpRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.GpRegValue)
  return target;
}

size_t GpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.GpRegValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.GpRegsEnum index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GpRegValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.GpRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  const GpRegValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GpRegValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.GpRegValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.GpRegValue)
    MergeFrom(*source);
  }
}

void GpRegValue::MergeFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.GpRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void GpRegValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpRegValue::CopyFrom(const GpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.GpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpRegValue::IsInitialized() const {
  return true;
}

void GpRegValue::InternalSwap(GpRegValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GpRegValue, value_)
      + sizeof(GpRegValue::value_)
      - PROTOBUF_FIELD_OFFSET(GpRegValue, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GpRegValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VdpReg::_Internal {
 public:
};

VdpReg::VdpReg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpReg)
}
VdpReg::VdpReg(const VdpReg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reg_ = from.reg_;
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpReg)
}

void VdpReg::SharedCtor() {
reg_ = 0;
}

VdpReg::~VdpReg() {
  // @@protoc_insertion_point(destructor:idadebug.VdpReg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VdpReg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VdpReg::ArenaDtor(void* object) {
  VdpReg* _this = reinterpret_cast< VdpReg* >(object);
  (void)_this;
}
void VdpReg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VdpReg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VdpReg::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reg_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VdpReg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.VdpRegsEnum reg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reg(static_cast<::idadebug::VdpRegsEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VdpReg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpReg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->reg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpReg)
  return target;
}

size_t VdpReg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpReg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum reg = 1;
  if (this->reg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VdpReg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.VdpReg)
  GOOGLE_DCHECK_NE(&from, this);
  const VdpReg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VdpReg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.VdpReg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.VdpReg)
    MergeFrom(*source);
  }
}

void VdpReg::MergeFrom(const VdpReg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpReg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reg() != 0) {
    _internal_set_reg(from._internal_reg());
  }
}

void VdpReg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.VdpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VdpReg::CopyFrom(const VdpReg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpReg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpReg::IsInitialized() const {
  return true;
}

void VdpReg::InternalSwap(VdpReg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reg_, other->reg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VdpReg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VdpRegs::_Internal {
 public:
};

VdpRegs::VdpRegs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegs)
}
VdpRegs::VdpRegs(const VdpRegs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&v00_, &from.v00_,
    static_cast<size_t>(reinterpret_cast<char*>(&v17_) -
    reinterpret_cast<char*>(&v00_)) + sizeof(v17_));
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpRegs)
}

void VdpRegs::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&v00_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v17_) -
    reinterpret_cast<char*>(&v00_)) + sizeof(v17_));
}

VdpRegs::~VdpRegs() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VdpRegs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VdpRegs::ArenaDtor(void* object) {
  VdpRegs* _this = reinterpret_cast< VdpRegs* >(object);
  (void)_this;
}
void VdpRegs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VdpRegs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VdpRegs::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v00_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v17_) -
      reinterpret_cast<char*>(&v00_)) + sizeof(v17_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VdpRegs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 V00 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v00_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V01 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v01_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V02 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v02_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V03 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          v03_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V04 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          v04_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V05 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          v05_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V06 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          v06_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V07 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          v07_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V08 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          v08_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V09 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          v09_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V0A = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          v0a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V0B = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          v0b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V0C = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          v0c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V0D = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          v0d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V0E = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          v0e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V0F = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          v0f_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V10 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          v10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V11 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          v11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V12 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          v12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V13 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          v13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V14 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          v14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V15 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          v15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V16 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          v16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 V17 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          v17_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VdpRegs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->v00() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_v00(), target);
  }

  // uint32 V01 = 2;
  if (this->v01() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_v01(), target);
  }

  // uint32 V02 = 3;
  if (this->v02() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_v02(), target);
  }

  // uint32 V03 = 4;
  if (this->v03() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_v03(), target);
  }

  // uint32 V04 = 5;
  if (this->v04() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_v04(), target);
  }

  // uint32 V05 = 6;
  if (this->v05() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_v05(), target);
  }

  // uint32 V06 = 7;
  if (this->v06() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_v06(), target);
  }

  // uint32 V07 = 8;
  if (this->v07() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_v07(), target);
  }

  // uint32 V08 = 9;
  if (this->v08() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_v08(), target);
  }

  // uint32 V09 = 10;
  if (this->v09() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_v09(), target);
  }

  // uint32 V0A = 11;
  if (this->v0a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_v0a(), target);
  }

  // uint32 V0B = 12;
  if (this->v0b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_v0b(), target);
  }

  // uint32 V0C = 13;
  if (this->v0c() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_v0c(), target);
  }

  // uint32 V0D = 14;
  if (this->v0d() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_v0d(), target);
  }

  // uint32 V0E = 15;
  if (this->v0e() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_v0e(), target);
  }

  // uint32 V0F = 16;
  if (this->v0f() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_v0f(), target);
  }

  // uint32 V10 = 17;
  if (this->v10() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_v10(), target);
  }

  // uint32 V11 = 18;
  if (this->v11() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_v11(), target);
  }

  // uint32 V12 = 19;
  if (this->v12() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_v12(), target);
  }

  // uint32 V13 = 20;
  if (this->v13() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_v13(), target);
  }

  // uint32 V14 = 21;
  if (this->v14() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_v14(), target);
  }

  // uint32 V15 = 22;
  if (this->v15() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_v15(), target);
  }

  // uint32 V16 = 23;
  if (this->v16() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_v16(), target);
  }

  // uint32 V17 = 24;
  if (this->v17() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_v17(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegs)
  return target;
}

size_t VdpRegs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegs)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 V00 = 1;
  if (this->v00() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v00());
  }

  // uint32 V01 = 2;
  if (this->v01() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v01());
  }

  // uint32 V02 = 3;
  if (this->v02() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v02());
  }

  // uint32 V03 = 4;
  if (this->v03() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v03());
  }

  // uint32 V04 = 5;
  if (this->v04() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v04());
  }

  // uint32 V05 = 6;
  if (this->v05() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v05());
  }

  // uint32 V06 = 7;
  if (this->v06() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v06());
  }

  // uint32 V07 = 8;
  if (this->v07() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v07());
  }

  // uint32 V08 = 9;
  if (this->v08() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v08());
  }

  // uint32 V09 = 10;
  if (this->v09() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v09());
  }

  // uint32 V0A = 11;
  if (this->v0a() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v0a());
  }

  // uint32 V0B = 12;
  if (this->v0b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v0b());
  }

  // uint32 V0C = 13;
  if (this->v0c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v0c());
  }

  // uint32 V0D = 14;
  if (this->v0d() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v0d());
  }

  // uint32 V0E = 15;
  if (this->v0e() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v0e());
  }

  // uint32 V0F = 16;
  if (this->v0f() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v0f());
  }

  // uint32 V10 = 17;
  if (this->v10() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v10());
  }

  // uint32 V11 = 18;
  if (this->v11() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v11());
  }

  // uint32 V12 = 19;
  if (this->v12() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v12());
  }

  // uint32 V13 = 20;
  if (this->v13() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v13());
  }

  // uint32 V14 = 21;
  if (this->v14() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v14());
  }

  // uint32 V15 = 22;
  if (this->v15() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v15());
  }

  // uint32 V16 = 23;
  if (this->v16() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v16());
  }

  // uint32 V17 = 24;
  if (this->v17() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_v17());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VdpRegs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.VdpRegs)
  GOOGLE_DCHECK_NE(&from, this);
  const VdpRegs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VdpRegs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.VdpRegs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.VdpRegs)
    MergeFrom(*source);
  }
}

void VdpRegs::MergeFrom(const VdpRegs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v00() != 0) {
    _internal_set_v00(from._internal_v00());
  }
  if (from.v01() != 0) {
    _internal_set_v01(from._internal_v01());
  }
  if (from.v02() != 0) {
    _internal_set_v02(from._internal_v02());
  }
  if (from.v03() != 0) {
    _internal_set_v03(from._internal_v03());
  }
  if (from.v04() != 0) {
    _internal_set_v04(from._internal_v04());
  }
  if (from.v05() != 0) {
    _internal_set_v05(from._internal_v05());
  }
  if (from.v06() != 0) {
    _internal_set_v06(from._internal_v06());
  }
  if (from.v07() != 0) {
    _internal_set_v07(from._internal_v07());
  }
  if (from.v08() != 0) {
    _internal_set_v08(from._internal_v08());
  }
  if (from.v09() != 0) {
    _internal_set_v09(from._internal_v09());
  }
  if (from.v0a() != 0) {
    _internal_set_v0a(from._internal_v0a());
  }
  if (from.v0b() != 0) {
    _internal_set_v0b(from._internal_v0b());
  }
  if (from.v0c() != 0) {
    _internal_set_v0c(from._internal_v0c());
  }
  if (from.v0d() != 0) {
    _internal_set_v0d(from._internal_v0d());
  }
  if (from.v0e() != 0) {
    _internal_set_v0e(from._internal_v0e());
  }
  if (from.v0f() != 0) {
    _internal_set_v0f(from._internal_v0f());
  }
  if (from.v10() != 0) {
    _internal_set_v10(from._internal_v10());
  }
  if (from.v11() != 0) {
    _internal_set_v11(from._internal_v11());
  }
  if (from.v12() != 0) {
    _internal_set_v12(from._internal_v12());
  }
  if (from.v13() != 0) {
    _internal_set_v13(from._internal_v13());
  }
  if (from.v14() != 0) {
    _internal_set_v14(from._internal_v14());
  }
  if (from.v15() != 0) {
    _internal_set_v15(from._internal_v15());
  }
  if (from.v16() != 0) {
    _internal_set_v16(from._internal_v16());
  }
  if (from.v17() != 0) {
    _internal_set_v17(from._internal_v17());
  }
}

void VdpRegs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.VdpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VdpRegs::CopyFrom(const VdpRegs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpRegs::IsInitialized() const {
  return true;
}

void VdpRegs::InternalSwap(VdpRegs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegs, v17_)
      + sizeof(VdpRegs::v17_)
      - PROTOBUF_FIELD_OFFSET(VdpRegs, v00_)>(
          reinterpret_cast<char*>(&v00_),
          reinterpret_cast<char*>(&other->v00_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VdpRegs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VdpRegValue::_Internal {
 public:
};

VdpRegValue::VdpRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.VdpRegValue)
}
VdpRegValue::VdpRegValue(const VdpRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:idadebug.VdpRegValue)
}

void VdpRegValue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&index_)) + sizeof(value_));
}

VdpRegValue::~VdpRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.VdpRegValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VdpRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VdpRegValue::ArenaDtor(void* object) {
  VdpRegValue* _this = reinterpret_cast< VdpRegValue* >(object);
  (void)_this;
}
void VdpRegValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VdpRegValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VdpRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.VdpRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&index_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VdpRegValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.VdpRegsEnum index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_index(static_cast<::idadebug::VdpRegsEnum>(val));
        } else goto handle_unusual;
        continue;
      // uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VdpRegValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.VdpRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_index(), target);
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.VdpRegValue)
  return target;
}

size_t VdpRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.VdpRegValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.VdpRegsEnum index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_index());
  }

  // uint32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VdpRegValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.VdpRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  const VdpRegValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VdpRegValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.VdpRegValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.VdpRegValue)
    MergeFrom(*source);
  }
}

void VdpRegValue::MergeFrom(const VdpRegValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.VdpRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void VdpRegValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.VdpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VdpRegValue::CopyFrom(const VdpRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.VdpRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VdpRegValue::IsInitialized() const {
  return true;
}

void VdpRegValue::InternalSwap(VdpRegValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VdpRegValue, value_)
      + sizeof(VdpRegValue::value_)
      - PROTOBUF_FIELD_OFFSET(VdpRegValue, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VdpRegValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DmaInfo::_Internal {
 public:
};

DmaInfo::DmaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DmaInfo)
}
DmaInfo::DmaInfo(const DmaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&len_, &from.len_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&len_)) + sizeof(dst_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DmaInfo)
}

void DmaInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&len_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&len_)) + sizeof(dst_));
}

DmaInfo::~DmaInfo() {
  // @@protoc_insertion_point(destructor:idadebug.DmaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DmaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DmaInfo::ArenaDtor(void* object) {
  DmaInfo* _this = reinterpret_cast< DmaInfo* >(object);
  (void)_this;
}
void DmaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DmaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DmaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DmaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&len_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_) -
      reinterpret_cast<char*>(&len_)) + sizeof(dst_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DmaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 len = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 dst = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DmaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DmaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_len(), target);
  }

  // uint32 src = 2;
  if (this->src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src(), target);
  }

  // uint32 dst = 3;
  if (this->dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DmaInfo)
  return target;
}

size_t DmaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DmaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 len = 1;
  if (this->len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_len());
  }

  // uint32 src = 2;
  if (this->src() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_src());
  }

  // uint32 dst = 3;
  if (this->dst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dst());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DmaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.DmaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DmaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DmaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.DmaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.DmaInfo)
    MergeFrom(*source);
  }
}

void DmaInfo::MergeFrom(const DmaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DmaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from.src() != 0) {
    _internal_set_src(from._internal_src());
  }
  if (from.dst() != 0) {
    _internal_set_dst(from._internal_dst());
  }
}

void DmaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.DmaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DmaInfo::CopyFrom(const DmaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DmaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DmaInfo::IsInitialized() const {
  return true;
}

void DmaInfo::InternalSwap(DmaInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DmaInfo, dst_)
      + sizeof(DmaInfo::dst_)
      - PROTOBUF_FIELD_OFFSET(DmaInfo, len_)>(
          reinterpret_cast<char*>(&len_),
          reinterpret_cast<char*>(&other->len_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DmaInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoryAS::_Internal {
 public:
};

MemoryAS::MemoryAS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAS)
}
MemoryAS::MemoryAS(const MemoryAS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&address_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAS)
}

void MemoryAS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&address_)) + sizeof(size_));
}

MemoryAS::~MemoryAS() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryAS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MemoryAS::ArenaDtor(void* object) {
  MemoryAS* _this = reinterpret_cast< MemoryAS* >(object);
  (void)_this;
}
void MemoryAS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryAS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryAS::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&address_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryAS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryAS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAS)
  return target;
}

size_t MemoryAS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryAS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.MemoryAS)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryAS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryAS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.MemoryAS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.MemoryAS)
    MergeFrom(*source);
  }
}

void MemoryAS::MergeFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void MemoryAS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryAS::CopyFrom(const MemoryAS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAS::IsInitialized() const {
  return true;
}

void MemoryAS::InternalSwap(MemoryAS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryAS, size_)
      + sizeof(MemoryAS::size_)
      - PROTOBUF_FIELD_OFFSET(MemoryAS, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryAS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemoryAD::_Internal {
 public:
};

MemoryAD::MemoryAD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemoryAD)
}
MemoryAD::MemoryAD(const MemoryAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.MemoryAD)
}

void MemoryAD::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_ = 0u;
}

MemoryAD::~MemoryAD() {
  // @@protoc_insertion_point(destructor:idadebug.MemoryAD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemoryAD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemoryAD::ArenaDtor(void* object) {
  MemoryAD* _this = reinterpret_cast< MemoryAD* >(object);
  (void)_this;
}
void MemoryAD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemoryAD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemoryAD::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemoryAD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  address_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryAD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemoryAD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemoryAD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemoryAD)
  return target;
}

size_t MemoryAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemoryAD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemoryAD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.MemoryAD)
  GOOGLE_DCHECK_NE(&from, this);
  const MemoryAD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemoryAD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.MemoryAD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.MemoryAD)
    MergeFrom(*source);
  }
}

void MemoryAD::MergeFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemoryAD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void MemoryAD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryAD::CopyFrom(const MemoryAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemoryAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryAD::IsInitialized() const {
  return true;
}

void MemoryAD::InternalSwap(MemoryAD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryAD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DbgBreakpoint::_Internal {
 public:
};

DbgBreakpoint::DbgBreakpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoint)
}
DbgBreakpoint::DbgBreakpoint(const DbgBreakpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_forbid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_forbid_));
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoint)
}

void DbgBreakpoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_forbid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_forbid_));
}

DbgBreakpoint::~DbgBreakpoint() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbgBreakpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DbgBreakpoint::ArenaDtor(void* object) {
  DbgBreakpoint* _this = reinterpret_cast< DbgBreakpoint* >(object);
  (void)_this;
}
void DbgBreakpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbgBreakpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbgBreakpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_forbid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_forbid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbgBreakpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .idadebug.BpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::idadebug::BpType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 bstart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 bend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_vdp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_vdp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_forbid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_forbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbgBreakpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 bstart = 2;
  if (this->bstart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bstart(), target);
  }

  // uint32 bend = 3;
  if (this->bend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bend(), target);
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  // bool is_vdp = 5;
  if (this->is_vdp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_vdp(), target);
  }

  // bool is_forbid = 6;
  if (this->is_forbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_forbid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoint)
  return target;
}

size_t DbgBreakpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .idadebug.BpType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 bstart = 2;
  if (this->bstart() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bstart());
  }

  // uint32 bend = 3;
  if (this->bend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bend());
  }

  // bool enabled = 4;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_vdp = 5;
  if (this->is_vdp() != 0) {
    total_size += 1 + 1;
  }

  // bool is_forbid = 6;
  if (this->is_forbid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbgBreakpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.DbgBreakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const DbgBreakpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbgBreakpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.DbgBreakpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.DbgBreakpoint)
    MergeFrom(*source);
  }
}

void DbgBreakpoint::MergeFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.bstart() != 0) {
    _internal_set_bstart(from._internal_bstart());
  }
  if (from.bend() != 0) {
    _internal_set_bend(from._internal_bend());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
  if (from.is_vdp() != 0) {
    _internal_set_is_vdp(from._internal_is_vdp());
  }
  if (from.is_forbid() != 0) {
    _internal_set_is_forbid(from._internal_is_forbid());
  }
}

void DbgBreakpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbgBreakpoint::CopyFrom(const DbgBreakpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoint::IsInitialized() const {
  return true;
}

void DbgBreakpoint::InternalSwap(DbgBreakpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DbgBreakpoint, is_forbid_)
      + sizeof(DbgBreakpoint::is_forbid_)
      - PROTOBUF_FIELD_OFFSET(DbgBreakpoint, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DbgBreakpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DbgBreakpoints::_Internal {
 public:
};

DbgBreakpoints::DbgBreakpoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.DbgBreakpoints)
}
DbgBreakpoints::DbgBreakpoints(const DbgBreakpoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.DbgBreakpoints)
}

void DbgBreakpoints::SharedCtor() {
}

DbgBreakpoints::~DbgBreakpoints() {
  // @@protoc_insertion_point(destructor:idadebug.DbgBreakpoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbgBreakpoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DbgBreakpoints::ArenaDtor(void* object) {
  DbgBreakpoints* _this = reinterpret_cast< DbgBreakpoints* >(object);
  (void)_this;
}
void DbgBreakpoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbgBreakpoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DbgBreakpoints::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.DbgBreakpoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbgBreakpoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .idadebug.DbgBreakpoint list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbgBreakpoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.DbgBreakpoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.DbgBreakpoints)
  return target;
}

size_t DbgBreakpoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.DbgBreakpoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .idadebug.DbgBreakpoint list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbgBreakpoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.DbgBreakpoints)
  GOOGLE_DCHECK_NE(&from, this);
  const DbgBreakpoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbgBreakpoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.DbgBreakpoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.DbgBreakpoints)
    MergeFrom(*source);
  }
}

void DbgBreakpoints::MergeFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.DbgBreakpoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  list_.MergeFrom(from.list_);
}

void DbgBreakpoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbgBreakpoints::CopyFrom(const DbgBreakpoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.DbgBreakpoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgBreakpoints::IsInitialized() const {
  return true;
}

void DbgBreakpoints::InternalSwap(DbgBreakpoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbgBreakpoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Callstack::_Internal {
 public:
};

Callstack::Callstack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  callstack_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Callstack)
}
Callstack::Callstack(const Callstack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      callstack_(from.callstack_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Callstack)
}

void Callstack::SharedCtor() {
}

Callstack::~Callstack() {
  // @@protoc_insertion_point(destructor:idadebug.Callstack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Callstack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Callstack::ArenaDtor(void* object) {
  Callstack* _this = reinterpret_cast< Callstack* >(object);
  (void)_this;
}
void Callstack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Callstack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Callstack::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Callstack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callstack_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Callstack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 callstack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_callstack(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_callstack(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Callstack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Callstack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    int byte_size = _callstack_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_callstack(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Callstack)
  return target;
}

size_t Callstack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Callstack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 callstack = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->callstack_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _callstack_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Callstack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.Callstack)
  GOOGLE_DCHECK_NE(&from, this);
  const Callstack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Callstack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.Callstack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.Callstack)
    MergeFrom(*source);
  }
}

void Callstack::MergeFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Callstack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callstack_.MergeFrom(from.callstack_);
}

void Callstack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Callstack::CopyFrom(const Callstack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Callstack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Callstack::IsInitialized() const {
  return true;
}

void Callstack::InternalSwap(Callstack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  callstack_.InternalSwap(&other->callstack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Callstack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AnyRegValue::_Internal {
 public:
};

AnyRegValue::AnyRegValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.AnyRegValue)
}
AnyRegValue::AnyRegValue(const AnyRegValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:idadebug.AnyRegValue)
}

void AnyRegValue::SharedCtor() {
value_ = 0u;
}

AnyRegValue::~AnyRegValue() {
  // @@protoc_insertion_point(destructor:idadebug.AnyRegValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnyRegValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AnyRegValue::ArenaDtor(void* object) {
  AnyRegValue* _this = reinterpret_cast< AnyRegValue* >(object);
  (void)_this;
}
void AnyRegValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnyRegValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnyRegValue::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.AnyRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnyRegValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnyRegValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.AnyRegValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.AnyRegValue)
  return target;
}

size_t AnyRegValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.AnyRegValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnyRegValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.AnyRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AnyRegValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnyRegValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.AnyRegValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.AnyRegValue)
    MergeFrom(*source);
  }
}

void AnyRegValue::MergeFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.AnyRegValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void AnyRegValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnyRegValue::CopyFrom(const AnyRegValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.AnyRegValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnyRegValue::IsInitialized() const {
  return true;
}

void AnyRegValue::InternalSwap(AnyRegValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnyRegValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MemData::_Internal {
 public:
};

MemData::MemData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.MemData)
}
MemData::MemData(const MemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:idadebug.MemData)
}

void MemData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MemData::~MemData() {
  // @@protoc_insertion_point(destructor:idadebug.MemData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MemData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MemData::ArenaDtor(void* object) {
  MemData* _this = reinterpret_cast< MemData* >(object);
  (void)_this;
}
void MemData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MemData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemData::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.MemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MemData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.MemData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.MemData)
  return target;
}

size_t MemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.MemData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MemData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.MemData)
  GOOGLE_DCHECK_NE(&from, this);
  const MemData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MemData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.MemData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.MemData)
    MergeFrom(*source);
  }
}

void MemData::MergeFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.MemData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void MemData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemData::CopyFrom(const MemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.MemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemData::IsInitialized() const {
  return true;
}

void MemData::InternalSwap(MemData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MemData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse() {}
PauseChanged_ChangedEntry_DoNotUse::PauseChanged_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PauseChanged_ChangedEntry_DoNotUse::MergeFrom(const PauseChanged_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PauseChanged_ChangedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PauseChanged_ChangedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class PauseChanged::_Internal {
 public:
};

PauseChanged::PauseChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  changed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.PauseChanged)
}
PauseChanged::PauseChanged(const PauseChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  changed_.MergeFrom(from.changed_);
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:idadebug.PauseChanged)
}

void PauseChanged::SharedCtor() {
address_ = 0u;
}

PauseChanged::~PauseChanged() {
  // @@protoc_insertion_point(destructor:idadebug.PauseChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PauseChanged::ArenaDtor(void* object) {
  PauseChanged* _this = reinterpret_cast< PauseChanged* >(object);
  (void)_this;
}
void PauseChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PauseChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.PauseChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_.Clear();
  address_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> changed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.PauseChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 address = 1;
  if (this->address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_address(), target);
  }

  // map<uint32, uint32> changed = 2;
  if (!this->_internal_changed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_changed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_changed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PauseChanged_ChangedEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it) {
        target = PauseChanged_ChangedEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.PauseChanged)
  return target;
}

size_t PauseChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.PauseChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += PauseChanged_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint32 address = 1;
  if (this->address() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.PauseChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.PauseChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.PauseChanged)
    MergeFrom(*source);
  }
}

void PauseChanged::MergeFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.PauseChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_.MergeFrom(from.changed_);
  if (from.address() != 0) {
    _internal_set_address(from._internal_address());
  }
}

void PauseChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseChanged::CopyFrom(const PauseChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.PauseChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseChanged::IsInitialized() const {
  return true;
}

void PauseChanged::InternalSwap(PauseChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  changed_.Swap(&other->changed_);
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse() {}
Changed_ChangedEntry_DoNotUse::Changed_ChangedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Changed_ChangedEntry_DoNotUse::MergeFrom(const Changed_ChangedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Changed_ChangedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Changed_ChangedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Changed::_Internal {
 public:
};

Changed::Changed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  changed_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:idadebug.Changed)
}
Changed::Changed(const Changed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  changed_.MergeFrom(from.changed_);
  // @@protoc_insertion_point(copy_constructor:idadebug.Changed)
}

void Changed::SharedCtor() {
}

Changed::~Changed() {
  // @@protoc_insertion_point(destructor:idadebug.Changed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Changed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Changed::ArenaDtor(void* object) {
  Changed* _this = reinterpret_cast< Changed* >(object);
  (void)_this;
}
void Changed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Changed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Changed::Clear() {
// @@protoc_insertion_point(message_clear_start:idadebug.Changed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  changed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Changed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, uint32> changed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&changed_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Changed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:idadebug.Changed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  if (!this->_internal_changed().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_changed().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_changed().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Changed_ChangedEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_changed().begin();
          it != this->_internal_changed().end(); ++it) {
        target = Changed_ChangedEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:idadebug.Changed)
  return target;
}

size_t Changed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:idadebug.Changed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, uint32> changed = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_changed_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_changed().begin();
      it != this->_internal_changed().end(); ++it) {
    total_size += Changed_ChangedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Changed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:idadebug.Changed)
  GOOGLE_DCHECK_NE(&from, this);
  const Changed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Changed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:idadebug.Changed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:idadebug.Changed)
    MergeFrom(*source);
  }
}

void Changed::MergeFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:idadebug.Changed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changed_.MergeFrom(from.changed_);
}

void Changed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Changed::CopyFrom(const Changed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:idadebug.Changed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Changed::IsInitialized() const {
  return true;
}

void Changed::InternalSwap(Changed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  changed_.Swap(&other->changed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Changed::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace idadebug
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::idadebug::GpReg* Arena::CreateMaybeMessage< ::idadebug::GpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegs* Arena::CreateMaybeMessage< ::idadebug::GpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::GpRegValue* Arena::CreateMaybeMessage< ::idadebug::GpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::GpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpReg* Arena::CreateMaybeMessage< ::idadebug::VdpReg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpReg >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpRegs* Arena::CreateMaybeMessage< ::idadebug::VdpRegs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpRegs >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::VdpRegValue* Arena::CreateMaybeMessage< ::idadebug::VdpRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::VdpRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DmaInfo* Arena::CreateMaybeMessage< ::idadebug::DmaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DmaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAS* Arena::CreateMaybeMessage< ::idadebug::MemoryAS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAS >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemoryAD* Arena::CreateMaybeMessage< ::idadebug::MemoryAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemoryAD >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoint* Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::DbgBreakpoints* Arena::CreateMaybeMessage< ::idadebug::DbgBreakpoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::DbgBreakpoints >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Callstack* Arena::CreateMaybeMessage< ::idadebug::Callstack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Callstack >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::AnyRegValue* Arena::CreateMaybeMessage< ::idadebug::AnyRegValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::AnyRegValue >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::MemData* Arena::CreateMaybeMessage< ::idadebug::MemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::MemData >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::PauseChanged* Arena::CreateMaybeMessage< ::idadebug::PauseChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::PauseChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed_ChangedEntry_DoNotUse* Arena::CreateMaybeMessage< ::idadebug::Changed_ChangedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed_ChangedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::idadebug::Changed* Arena::CreateMaybeMessage< ::idadebug::Changed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::idadebug::Changed >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
